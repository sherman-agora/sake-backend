// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  shipping: (where?: ShippingWhereInput) => Promise<boolean>;
  shippingItem: (where?: ShippingItemWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  shipping: (where: ShippingWhereUniqueInput) => ShippingNullablePromise;
  shippings: (args?: {
    where?: ShippingWhereInput;
    orderBy?: ShippingOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Shipping>;
  shippingsConnection: (args?: {
    where?: ShippingWhereInput;
    orderBy?: ShippingOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ShippingConnectionPromise;
  shippingItem: (
    where: ShippingItemWhereUniqueInput
  ) => ShippingItemNullablePromise;
  shippingItems: (args?: {
    where?: ShippingItemWhereInput;
    orderBy?: ShippingItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ShippingItem>;
  shippingItemsConnection: (args?: {
    where?: ShippingItemWhereInput;
    orderBy?: ShippingItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ShippingItemConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createShipping: (data: ShippingCreateInput) => ShippingPromise;
  updateShipping: (args: {
    data: ShippingUpdateInput;
    where: ShippingWhereUniqueInput;
  }) => ShippingPromise;
  updateManyShippings: (args: {
    data: ShippingUpdateManyMutationInput;
    where?: ShippingWhereInput;
  }) => BatchPayloadPromise;
  upsertShipping: (args: {
    where: ShippingWhereUniqueInput;
    create: ShippingCreateInput;
    update: ShippingUpdateInput;
  }) => ShippingPromise;
  deleteShipping: (where: ShippingWhereUniqueInput) => ShippingPromise;
  deleteManyShippings: (where?: ShippingWhereInput) => BatchPayloadPromise;
  createShippingItem: (data: ShippingItemCreateInput) => ShippingItemPromise;
  updateShippingItem: (args: {
    data: ShippingItemUpdateInput;
    where: ShippingItemWhereUniqueInput;
  }) => ShippingItemPromise;
  updateManyShippingItems: (args: {
    data: ShippingItemUpdateManyMutationInput;
    where?: ShippingItemWhereInput;
  }) => BatchPayloadPromise;
  upsertShippingItem: (args: {
    where: ShippingItemWhereUniqueInput;
    create: ShippingItemCreateInput;
    update: ShippingItemUpdateInput;
  }) => ShippingItemPromise;
  deleteShippingItem: (
    where: ShippingItemWhereUniqueInput
  ) => ShippingItemPromise;
  deleteManyShippingItems: (
    where?: ShippingItemWhereInput
  ) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  shipping: (
    where?: ShippingSubscriptionWhereInput
  ) => ShippingSubscriptionPayloadSubscription;
  shippingItem: (
    where?: ShippingItemSubscriptionWhereInput
  ) => ShippingItemSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type ShippingState = "CONFIRMED" | "DELETE";

export type ShippingItemOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "productId_ASC"
  | "productId_DESC"
  | "warehouseId_ASC"
  | "warehouseId_DESC"
  | "expiryDate_ASC"
  | "expiryDate_DESC"
  | "labelFrom_ASC"
  | "labelFrom_DESC"
  | "labelTo_ASC"
  | "labelTo_DESC"
  | "expectedQuantity_ASC"
  | "expectedQuantity_DESC"
  | "quantity_ASC"
  | "quantity_DESC"
  | "price_ASC"
  | "price_DESC"
  | "totalPrice_ASC"
  | "totalPrice_DESC"
  | "deliveryDate_ASC"
  | "deliveryDate_DESC"
  | "remarks_ASC"
  | "remarks_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ShippingOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "code_ASC"
  | "code_DESC"
  | "purchaseOrderId_ASC"
  | "purchaseOrderId_DESC"
  | "userId_ASC"
  | "userId_DESC"
  | "deliveryAt_ASC"
  | "deliveryAt_DESC"
  | "unfinishedTax_ASC"
  | "unfinishedTax_DESC"
  | "totalPrice_ASC"
  | "totalPrice_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "state_ASC"
  | "state_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface ShippingUpdateInput {
  code?: Maybe<String>;
  purchaseOrderId?: Maybe<ID_Input>;
  userId?: Maybe<ID_Input>;
  deliveryAt?: Maybe<DateTimeInput>;
  unfinishedTax?: Maybe<Float>;
  totalPrice?: Maybe<Float>;
  products?: Maybe<ShippingItemUpdateManyWithoutShippingInput>;
  state?: Maybe<ShippingState>;
}

export type ShippingWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  code?: Maybe<String>;
}>;

export interface ShippingItemUpdateWithoutShippingDataInput {
  productId?: Maybe<ID_Input>;
  warehouseId?: Maybe<ID_Input>;
  expiryDate?: Maybe<DateTimeInput>;
  labelFrom?: Maybe<String>;
  labelTo?: Maybe<String>;
  expectedQuantity?: Maybe<Int>;
  quantity?: Maybe<Int>;
  price?: Maybe<Float>;
  totalPrice?: Maybe<Float>;
  deliveryDate?: Maybe<DateTimeInput>;
  remarks?: Maybe<String>;
}

export interface ShippingItemWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  shipping?: Maybe<ShippingWhereInput>;
  productId?: Maybe<ID_Input>;
  productId_not?: Maybe<ID_Input>;
  productId_in?: Maybe<ID_Input[] | ID_Input>;
  productId_not_in?: Maybe<ID_Input[] | ID_Input>;
  productId_lt?: Maybe<ID_Input>;
  productId_lte?: Maybe<ID_Input>;
  productId_gt?: Maybe<ID_Input>;
  productId_gte?: Maybe<ID_Input>;
  productId_contains?: Maybe<ID_Input>;
  productId_not_contains?: Maybe<ID_Input>;
  productId_starts_with?: Maybe<ID_Input>;
  productId_not_starts_with?: Maybe<ID_Input>;
  productId_ends_with?: Maybe<ID_Input>;
  productId_not_ends_with?: Maybe<ID_Input>;
  warehouseId?: Maybe<ID_Input>;
  warehouseId_not?: Maybe<ID_Input>;
  warehouseId_in?: Maybe<ID_Input[] | ID_Input>;
  warehouseId_not_in?: Maybe<ID_Input[] | ID_Input>;
  warehouseId_lt?: Maybe<ID_Input>;
  warehouseId_lte?: Maybe<ID_Input>;
  warehouseId_gt?: Maybe<ID_Input>;
  warehouseId_gte?: Maybe<ID_Input>;
  warehouseId_contains?: Maybe<ID_Input>;
  warehouseId_not_contains?: Maybe<ID_Input>;
  warehouseId_starts_with?: Maybe<ID_Input>;
  warehouseId_not_starts_with?: Maybe<ID_Input>;
  warehouseId_ends_with?: Maybe<ID_Input>;
  warehouseId_not_ends_with?: Maybe<ID_Input>;
  expiryDate?: Maybe<DateTimeInput>;
  expiryDate_not?: Maybe<DateTimeInput>;
  expiryDate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  expiryDate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  expiryDate_lt?: Maybe<DateTimeInput>;
  expiryDate_lte?: Maybe<DateTimeInput>;
  expiryDate_gt?: Maybe<DateTimeInput>;
  expiryDate_gte?: Maybe<DateTimeInput>;
  labelFrom?: Maybe<String>;
  labelFrom_not?: Maybe<String>;
  labelFrom_in?: Maybe<String[] | String>;
  labelFrom_not_in?: Maybe<String[] | String>;
  labelFrom_lt?: Maybe<String>;
  labelFrom_lte?: Maybe<String>;
  labelFrom_gt?: Maybe<String>;
  labelFrom_gte?: Maybe<String>;
  labelFrom_contains?: Maybe<String>;
  labelFrom_not_contains?: Maybe<String>;
  labelFrom_starts_with?: Maybe<String>;
  labelFrom_not_starts_with?: Maybe<String>;
  labelFrom_ends_with?: Maybe<String>;
  labelFrom_not_ends_with?: Maybe<String>;
  labelTo?: Maybe<String>;
  labelTo_not?: Maybe<String>;
  labelTo_in?: Maybe<String[] | String>;
  labelTo_not_in?: Maybe<String[] | String>;
  labelTo_lt?: Maybe<String>;
  labelTo_lte?: Maybe<String>;
  labelTo_gt?: Maybe<String>;
  labelTo_gte?: Maybe<String>;
  labelTo_contains?: Maybe<String>;
  labelTo_not_contains?: Maybe<String>;
  labelTo_starts_with?: Maybe<String>;
  labelTo_not_starts_with?: Maybe<String>;
  labelTo_ends_with?: Maybe<String>;
  labelTo_not_ends_with?: Maybe<String>;
  expectedQuantity?: Maybe<Int>;
  expectedQuantity_not?: Maybe<Int>;
  expectedQuantity_in?: Maybe<Int[] | Int>;
  expectedQuantity_not_in?: Maybe<Int[] | Int>;
  expectedQuantity_lt?: Maybe<Int>;
  expectedQuantity_lte?: Maybe<Int>;
  expectedQuantity_gt?: Maybe<Int>;
  expectedQuantity_gte?: Maybe<Int>;
  quantity?: Maybe<Int>;
  quantity_not?: Maybe<Int>;
  quantity_in?: Maybe<Int[] | Int>;
  quantity_not_in?: Maybe<Int[] | Int>;
  quantity_lt?: Maybe<Int>;
  quantity_lte?: Maybe<Int>;
  quantity_gt?: Maybe<Int>;
  quantity_gte?: Maybe<Int>;
  price?: Maybe<Float>;
  price_not?: Maybe<Float>;
  price_in?: Maybe<Float[] | Float>;
  price_not_in?: Maybe<Float[] | Float>;
  price_lt?: Maybe<Float>;
  price_lte?: Maybe<Float>;
  price_gt?: Maybe<Float>;
  price_gte?: Maybe<Float>;
  totalPrice?: Maybe<Float>;
  totalPrice_not?: Maybe<Float>;
  totalPrice_in?: Maybe<Float[] | Float>;
  totalPrice_not_in?: Maybe<Float[] | Float>;
  totalPrice_lt?: Maybe<Float>;
  totalPrice_lte?: Maybe<Float>;
  totalPrice_gt?: Maybe<Float>;
  totalPrice_gte?: Maybe<Float>;
  deliveryDate?: Maybe<DateTimeInput>;
  deliveryDate_not?: Maybe<DateTimeInput>;
  deliveryDate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  deliveryDate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  deliveryDate_lt?: Maybe<DateTimeInput>;
  deliveryDate_lte?: Maybe<DateTimeInput>;
  deliveryDate_gt?: Maybe<DateTimeInput>;
  deliveryDate_gte?: Maybe<DateTimeInput>;
  remarks?: Maybe<String>;
  remarks_not?: Maybe<String>;
  remarks_in?: Maybe<String[] | String>;
  remarks_not_in?: Maybe<String[] | String>;
  remarks_lt?: Maybe<String>;
  remarks_lte?: Maybe<String>;
  remarks_gt?: Maybe<String>;
  remarks_gte?: Maybe<String>;
  remarks_contains?: Maybe<String>;
  remarks_not_contains?: Maybe<String>;
  remarks_starts_with?: Maybe<String>;
  remarks_not_starts_with?: Maybe<String>;
  remarks_ends_with?: Maybe<String>;
  remarks_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ShippingItemWhereInput[] | ShippingItemWhereInput>;
  OR?: Maybe<ShippingItemWhereInput[] | ShippingItemWhereInput>;
  NOT?: Maybe<ShippingItemWhereInput[] | ShippingItemWhereInput>;
}

export interface ShippingItemCreateInput {
  id?: Maybe<ID_Input>;
  shipping: ShippingCreateOneWithoutProductsInput;
  productId: ID_Input;
  warehouseId?: Maybe<ID_Input>;
  expiryDate?: Maybe<DateTimeInput>;
  labelFrom?: Maybe<String>;
  labelTo?: Maybe<String>;
  expectedQuantity?: Maybe<Int>;
  quantity?: Maybe<Int>;
  price?: Maybe<Float>;
  totalPrice?: Maybe<Float>;
  deliveryDate?: Maybe<DateTimeInput>;
  remarks?: Maybe<String>;
}

export interface ShippingItemScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  productId?: Maybe<ID_Input>;
  productId_not?: Maybe<ID_Input>;
  productId_in?: Maybe<ID_Input[] | ID_Input>;
  productId_not_in?: Maybe<ID_Input[] | ID_Input>;
  productId_lt?: Maybe<ID_Input>;
  productId_lte?: Maybe<ID_Input>;
  productId_gt?: Maybe<ID_Input>;
  productId_gte?: Maybe<ID_Input>;
  productId_contains?: Maybe<ID_Input>;
  productId_not_contains?: Maybe<ID_Input>;
  productId_starts_with?: Maybe<ID_Input>;
  productId_not_starts_with?: Maybe<ID_Input>;
  productId_ends_with?: Maybe<ID_Input>;
  productId_not_ends_with?: Maybe<ID_Input>;
  warehouseId?: Maybe<ID_Input>;
  warehouseId_not?: Maybe<ID_Input>;
  warehouseId_in?: Maybe<ID_Input[] | ID_Input>;
  warehouseId_not_in?: Maybe<ID_Input[] | ID_Input>;
  warehouseId_lt?: Maybe<ID_Input>;
  warehouseId_lte?: Maybe<ID_Input>;
  warehouseId_gt?: Maybe<ID_Input>;
  warehouseId_gte?: Maybe<ID_Input>;
  warehouseId_contains?: Maybe<ID_Input>;
  warehouseId_not_contains?: Maybe<ID_Input>;
  warehouseId_starts_with?: Maybe<ID_Input>;
  warehouseId_not_starts_with?: Maybe<ID_Input>;
  warehouseId_ends_with?: Maybe<ID_Input>;
  warehouseId_not_ends_with?: Maybe<ID_Input>;
  expiryDate?: Maybe<DateTimeInput>;
  expiryDate_not?: Maybe<DateTimeInput>;
  expiryDate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  expiryDate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  expiryDate_lt?: Maybe<DateTimeInput>;
  expiryDate_lte?: Maybe<DateTimeInput>;
  expiryDate_gt?: Maybe<DateTimeInput>;
  expiryDate_gte?: Maybe<DateTimeInput>;
  labelFrom?: Maybe<String>;
  labelFrom_not?: Maybe<String>;
  labelFrom_in?: Maybe<String[] | String>;
  labelFrom_not_in?: Maybe<String[] | String>;
  labelFrom_lt?: Maybe<String>;
  labelFrom_lte?: Maybe<String>;
  labelFrom_gt?: Maybe<String>;
  labelFrom_gte?: Maybe<String>;
  labelFrom_contains?: Maybe<String>;
  labelFrom_not_contains?: Maybe<String>;
  labelFrom_starts_with?: Maybe<String>;
  labelFrom_not_starts_with?: Maybe<String>;
  labelFrom_ends_with?: Maybe<String>;
  labelFrom_not_ends_with?: Maybe<String>;
  labelTo?: Maybe<String>;
  labelTo_not?: Maybe<String>;
  labelTo_in?: Maybe<String[] | String>;
  labelTo_not_in?: Maybe<String[] | String>;
  labelTo_lt?: Maybe<String>;
  labelTo_lte?: Maybe<String>;
  labelTo_gt?: Maybe<String>;
  labelTo_gte?: Maybe<String>;
  labelTo_contains?: Maybe<String>;
  labelTo_not_contains?: Maybe<String>;
  labelTo_starts_with?: Maybe<String>;
  labelTo_not_starts_with?: Maybe<String>;
  labelTo_ends_with?: Maybe<String>;
  labelTo_not_ends_with?: Maybe<String>;
  expectedQuantity?: Maybe<Int>;
  expectedQuantity_not?: Maybe<Int>;
  expectedQuantity_in?: Maybe<Int[] | Int>;
  expectedQuantity_not_in?: Maybe<Int[] | Int>;
  expectedQuantity_lt?: Maybe<Int>;
  expectedQuantity_lte?: Maybe<Int>;
  expectedQuantity_gt?: Maybe<Int>;
  expectedQuantity_gte?: Maybe<Int>;
  quantity?: Maybe<Int>;
  quantity_not?: Maybe<Int>;
  quantity_in?: Maybe<Int[] | Int>;
  quantity_not_in?: Maybe<Int[] | Int>;
  quantity_lt?: Maybe<Int>;
  quantity_lte?: Maybe<Int>;
  quantity_gt?: Maybe<Int>;
  quantity_gte?: Maybe<Int>;
  price?: Maybe<Float>;
  price_not?: Maybe<Float>;
  price_in?: Maybe<Float[] | Float>;
  price_not_in?: Maybe<Float[] | Float>;
  price_lt?: Maybe<Float>;
  price_lte?: Maybe<Float>;
  price_gt?: Maybe<Float>;
  price_gte?: Maybe<Float>;
  totalPrice?: Maybe<Float>;
  totalPrice_not?: Maybe<Float>;
  totalPrice_in?: Maybe<Float[] | Float>;
  totalPrice_not_in?: Maybe<Float[] | Float>;
  totalPrice_lt?: Maybe<Float>;
  totalPrice_lte?: Maybe<Float>;
  totalPrice_gt?: Maybe<Float>;
  totalPrice_gte?: Maybe<Float>;
  deliveryDate?: Maybe<DateTimeInput>;
  deliveryDate_not?: Maybe<DateTimeInput>;
  deliveryDate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  deliveryDate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  deliveryDate_lt?: Maybe<DateTimeInput>;
  deliveryDate_lte?: Maybe<DateTimeInput>;
  deliveryDate_gt?: Maybe<DateTimeInput>;
  deliveryDate_gte?: Maybe<DateTimeInput>;
  remarks?: Maybe<String>;
  remarks_not?: Maybe<String>;
  remarks_in?: Maybe<String[] | String>;
  remarks_not_in?: Maybe<String[] | String>;
  remarks_lt?: Maybe<String>;
  remarks_lte?: Maybe<String>;
  remarks_gt?: Maybe<String>;
  remarks_gte?: Maybe<String>;
  remarks_contains?: Maybe<String>;
  remarks_not_contains?: Maybe<String>;
  remarks_starts_with?: Maybe<String>;
  remarks_not_starts_with?: Maybe<String>;
  remarks_ends_with?: Maybe<String>;
  remarks_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ShippingItemScalarWhereInput[] | ShippingItemScalarWhereInput>;
  OR?: Maybe<ShippingItemScalarWhereInput[] | ShippingItemScalarWhereInput>;
  NOT?: Maybe<ShippingItemScalarWhereInput[] | ShippingItemScalarWhereInput>;
}

export interface ShippingUpdateManyMutationInput {
  code?: Maybe<String>;
  purchaseOrderId?: Maybe<ID_Input>;
  userId?: Maybe<ID_Input>;
  deliveryAt?: Maybe<DateTimeInput>;
  unfinishedTax?: Maybe<Float>;
  totalPrice?: Maybe<Float>;
  state?: Maybe<ShippingState>;
}

export interface ShippingItemUpsertWithWhereUniqueWithoutShippingInput {
  where: ShippingItemWhereUniqueInput;
  update: ShippingItemUpdateWithoutShippingDataInput;
  create: ShippingItemCreateWithoutShippingInput;
}

export interface ShippingSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ShippingWhereInput>;
  AND?: Maybe<
    ShippingSubscriptionWhereInput[] | ShippingSubscriptionWhereInput
  >;
  OR?: Maybe<ShippingSubscriptionWhereInput[] | ShippingSubscriptionWhereInput>;
  NOT?: Maybe<
    ShippingSubscriptionWhereInput[] | ShippingSubscriptionWhereInput
  >;
}

export interface ShippingUpsertWithoutProductsInput {
  update: ShippingUpdateWithoutProductsDataInput;
  create: ShippingCreateWithoutProductsInput;
}

export interface ShippingCreateInput {
  id?: Maybe<ID_Input>;
  code: String;
  purchaseOrderId: ID_Input;
  userId?: Maybe<ID_Input>;
  deliveryAt?: Maybe<DateTimeInput>;
  unfinishedTax?: Maybe<Float>;
  totalPrice?: Maybe<Float>;
  products?: Maybe<ShippingItemCreateManyWithoutShippingInput>;
  state?: Maybe<ShippingState>;
}

export interface ShippingUpdateOneRequiredWithoutProductsInput {
  create?: Maybe<ShippingCreateWithoutProductsInput>;
  update?: Maybe<ShippingUpdateWithoutProductsDataInput>;
  upsert?: Maybe<ShippingUpsertWithoutProductsInput>;
  connect?: Maybe<ShippingWhereUniqueInput>;
}

export interface ShippingItemCreateManyWithoutShippingInput {
  create?: Maybe<
    | ShippingItemCreateWithoutShippingInput[]
    | ShippingItemCreateWithoutShippingInput
  >;
  connect?: Maybe<
    ShippingItemWhereUniqueInput[] | ShippingItemWhereUniqueInput
  >;
}

export interface ShippingCreateWithoutProductsInput {
  id?: Maybe<ID_Input>;
  code: String;
  purchaseOrderId: ID_Input;
  userId?: Maybe<ID_Input>;
  deliveryAt?: Maybe<DateTimeInput>;
  unfinishedTax?: Maybe<Float>;
  totalPrice?: Maybe<Float>;
  state?: Maybe<ShippingState>;
}

export interface ShippingItemCreateWithoutShippingInput {
  id?: Maybe<ID_Input>;
  productId: ID_Input;
  warehouseId?: Maybe<ID_Input>;
  expiryDate?: Maybe<DateTimeInput>;
  labelFrom?: Maybe<String>;
  labelTo?: Maybe<String>;
  expectedQuantity?: Maybe<Int>;
  quantity?: Maybe<Int>;
  price?: Maybe<Float>;
  totalPrice?: Maybe<Float>;
  deliveryDate?: Maybe<DateTimeInput>;
  remarks?: Maybe<String>;
}

export interface ShippingCreateOneWithoutProductsInput {
  create?: Maybe<ShippingCreateWithoutProductsInput>;
  connect?: Maybe<ShippingWhereUniqueInput>;
}

export interface ShippingItemUpdateManyDataInput {
  productId?: Maybe<ID_Input>;
  warehouseId?: Maybe<ID_Input>;
  expiryDate?: Maybe<DateTimeInput>;
  labelFrom?: Maybe<String>;
  labelTo?: Maybe<String>;
  expectedQuantity?: Maybe<Int>;
  quantity?: Maybe<Int>;
  price?: Maybe<Float>;
  totalPrice?: Maybe<Float>;
  deliveryDate?: Maybe<DateTimeInput>;
  remarks?: Maybe<String>;
}

export interface ShippingItemUpdateManyMutationInput {
  productId?: Maybe<ID_Input>;
  warehouseId?: Maybe<ID_Input>;
  expiryDate?: Maybe<DateTimeInput>;
  labelFrom?: Maybe<String>;
  labelTo?: Maybe<String>;
  expectedQuantity?: Maybe<Int>;
  quantity?: Maybe<Int>;
  price?: Maybe<Float>;
  totalPrice?: Maybe<Float>;
  deliveryDate?: Maybe<DateTimeInput>;
  remarks?: Maybe<String>;
}

export interface ShippingItemUpdateManyWithWhereNestedInput {
  where: ShippingItemScalarWhereInput;
  data: ShippingItemUpdateManyDataInput;
}

export interface ShippingWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  code?: Maybe<String>;
  code_not?: Maybe<String>;
  code_in?: Maybe<String[] | String>;
  code_not_in?: Maybe<String[] | String>;
  code_lt?: Maybe<String>;
  code_lte?: Maybe<String>;
  code_gt?: Maybe<String>;
  code_gte?: Maybe<String>;
  code_contains?: Maybe<String>;
  code_not_contains?: Maybe<String>;
  code_starts_with?: Maybe<String>;
  code_not_starts_with?: Maybe<String>;
  code_ends_with?: Maybe<String>;
  code_not_ends_with?: Maybe<String>;
  purchaseOrderId?: Maybe<ID_Input>;
  purchaseOrderId_not?: Maybe<ID_Input>;
  purchaseOrderId_in?: Maybe<ID_Input[] | ID_Input>;
  purchaseOrderId_not_in?: Maybe<ID_Input[] | ID_Input>;
  purchaseOrderId_lt?: Maybe<ID_Input>;
  purchaseOrderId_lte?: Maybe<ID_Input>;
  purchaseOrderId_gt?: Maybe<ID_Input>;
  purchaseOrderId_gte?: Maybe<ID_Input>;
  purchaseOrderId_contains?: Maybe<ID_Input>;
  purchaseOrderId_not_contains?: Maybe<ID_Input>;
  purchaseOrderId_starts_with?: Maybe<ID_Input>;
  purchaseOrderId_not_starts_with?: Maybe<ID_Input>;
  purchaseOrderId_ends_with?: Maybe<ID_Input>;
  purchaseOrderId_not_ends_with?: Maybe<ID_Input>;
  userId?: Maybe<ID_Input>;
  userId_not?: Maybe<ID_Input>;
  userId_in?: Maybe<ID_Input[] | ID_Input>;
  userId_not_in?: Maybe<ID_Input[] | ID_Input>;
  userId_lt?: Maybe<ID_Input>;
  userId_lte?: Maybe<ID_Input>;
  userId_gt?: Maybe<ID_Input>;
  userId_gte?: Maybe<ID_Input>;
  userId_contains?: Maybe<ID_Input>;
  userId_not_contains?: Maybe<ID_Input>;
  userId_starts_with?: Maybe<ID_Input>;
  userId_not_starts_with?: Maybe<ID_Input>;
  userId_ends_with?: Maybe<ID_Input>;
  userId_not_ends_with?: Maybe<ID_Input>;
  deliveryAt?: Maybe<DateTimeInput>;
  deliveryAt_not?: Maybe<DateTimeInput>;
  deliveryAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  deliveryAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  deliveryAt_lt?: Maybe<DateTimeInput>;
  deliveryAt_lte?: Maybe<DateTimeInput>;
  deliveryAt_gt?: Maybe<DateTimeInput>;
  deliveryAt_gte?: Maybe<DateTimeInput>;
  unfinishedTax?: Maybe<Float>;
  unfinishedTax_not?: Maybe<Float>;
  unfinishedTax_in?: Maybe<Float[] | Float>;
  unfinishedTax_not_in?: Maybe<Float[] | Float>;
  unfinishedTax_lt?: Maybe<Float>;
  unfinishedTax_lte?: Maybe<Float>;
  unfinishedTax_gt?: Maybe<Float>;
  unfinishedTax_gte?: Maybe<Float>;
  totalPrice?: Maybe<Float>;
  totalPrice_not?: Maybe<Float>;
  totalPrice_in?: Maybe<Float[] | Float>;
  totalPrice_not_in?: Maybe<Float[] | Float>;
  totalPrice_lt?: Maybe<Float>;
  totalPrice_lte?: Maybe<Float>;
  totalPrice_gt?: Maybe<Float>;
  totalPrice_gte?: Maybe<Float>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  products_every?: Maybe<ShippingItemWhereInput>;
  products_some?: Maybe<ShippingItemWhereInput>;
  products_none?: Maybe<ShippingItemWhereInput>;
  state?: Maybe<ShippingState>;
  state_not?: Maybe<ShippingState>;
  state_in?: Maybe<ShippingState[] | ShippingState>;
  state_not_in?: Maybe<ShippingState[] | ShippingState>;
  AND?: Maybe<ShippingWhereInput[] | ShippingWhereInput>;
  OR?: Maybe<ShippingWhereInput[] | ShippingWhereInput>;
  NOT?: Maybe<ShippingWhereInput[] | ShippingWhereInput>;
}

export interface ShippingItemUpdateWithWhereUniqueWithoutShippingInput {
  where: ShippingItemWhereUniqueInput;
  data: ShippingItemUpdateWithoutShippingDataInput;
}

export interface ShippingItemUpdateManyWithoutShippingInput {
  create?: Maybe<
    | ShippingItemCreateWithoutShippingInput[]
    | ShippingItemCreateWithoutShippingInput
  >;
  delete?: Maybe<ShippingItemWhereUniqueInput[] | ShippingItemWhereUniqueInput>;
  connect?: Maybe<
    ShippingItemWhereUniqueInput[] | ShippingItemWhereUniqueInput
  >;
  set?: Maybe<ShippingItemWhereUniqueInput[] | ShippingItemWhereUniqueInput>;
  disconnect?: Maybe<
    ShippingItemWhereUniqueInput[] | ShippingItemWhereUniqueInput
  >;
  update?: Maybe<
    | ShippingItemUpdateWithWhereUniqueWithoutShippingInput[]
    | ShippingItemUpdateWithWhereUniqueWithoutShippingInput
  >;
  upsert?: Maybe<
    | ShippingItemUpsertWithWhereUniqueWithoutShippingInput[]
    | ShippingItemUpsertWithWhereUniqueWithoutShippingInput
  >;
  deleteMany?: Maybe<
    ShippingItemScalarWhereInput[] | ShippingItemScalarWhereInput
  >;
  updateMany?: Maybe<
    | ShippingItemUpdateManyWithWhereNestedInput[]
    | ShippingItemUpdateManyWithWhereNestedInput
  >;
}

export interface ShippingUpdateWithoutProductsDataInput {
  code?: Maybe<String>;
  purchaseOrderId?: Maybe<ID_Input>;
  userId?: Maybe<ID_Input>;
  deliveryAt?: Maybe<DateTimeInput>;
  unfinishedTax?: Maybe<Float>;
  totalPrice?: Maybe<Float>;
  state?: Maybe<ShippingState>;
}

export interface ShippingItemSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ShippingItemWhereInput>;
  AND?: Maybe<
    ShippingItemSubscriptionWhereInput[] | ShippingItemSubscriptionWhereInput
  >;
  OR?: Maybe<
    ShippingItemSubscriptionWhereInput[] | ShippingItemSubscriptionWhereInput
  >;
  NOT?: Maybe<
    ShippingItemSubscriptionWhereInput[] | ShippingItemSubscriptionWhereInput
  >;
}

export type ShippingItemWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ShippingItemUpdateInput {
  shipping?: Maybe<ShippingUpdateOneRequiredWithoutProductsInput>;
  productId?: Maybe<ID_Input>;
  warehouseId?: Maybe<ID_Input>;
  expiryDate?: Maybe<DateTimeInput>;
  labelFrom?: Maybe<String>;
  labelTo?: Maybe<String>;
  expectedQuantity?: Maybe<Int>;
  quantity?: Maybe<Int>;
  price?: Maybe<Float>;
  totalPrice?: Maybe<Float>;
  deliveryDate?: Maybe<DateTimeInput>;
  remarks?: Maybe<String>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface ShippingItemPreviousValues {
  id: ID_Output;
  productId: ID_Output;
  warehouseId?: ID_Output;
  expiryDate?: DateTimeOutput;
  labelFrom?: String;
  labelTo?: String;
  expectedQuantity?: Int;
  quantity?: Int;
  price?: Float;
  totalPrice?: Float;
  deliveryDate?: DateTimeOutput;
  remarks?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ShippingItemPreviousValuesPromise
  extends Promise<ShippingItemPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  productId: () => Promise<ID_Output>;
  warehouseId: () => Promise<ID_Output>;
  expiryDate: () => Promise<DateTimeOutput>;
  labelFrom: () => Promise<String>;
  labelTo: () => Promise<String>;
  expectedQuantity: () => Promise<Int>;
  quantity: () => Promise<Int>;
  price: () => Promise<Float>;
  totalPrice: () => Promise<Float>;
  deliveryDate: () => Promise<DateTimeOutput>;
  remarks: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ShippingItemPreviousValuesSubscription
  extends Promise<AsyncIterator<ShippingItemPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  productId: () => Promise<AsyncIterator<ID_Output>>;
  warehouseId: () => Promise<AsyncIterator<ID_Output>>;
  expiryDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  labelFrom: () => Promise<AsyncIterator<String>>;
  labelTo: () => Promise<AsyncIterator<String>>;
  expectedQuantity: () => Promise<AsyncIterator<Int>>;
  quantity: () => Promise<AsyncIterator<Int>>;
  price: () => Promise<AsyncIterator<Float>>;
  totalPrice: () => Promise<AsyncIterator<Float>>;
  deliveryDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  remarks: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface AggregateShipping {
  count: Int;
}

export interface AggregateShippingPromise
  extends Promise<AggregateShipping>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateShippingSubscription
  extends Promise<AsyncIterator<AggregateShipping>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ShippingItem {
  id: ID_Output;
  productId: ID_Output;
  warehouseId?: ID_Output;
  expiryDate?: DateTimeOutput;
  labelFrom?: String;
  labelTo?: String;
  expectedQuantity?: Int;
  quantity?: Int;
  price?: Float;
  totalPrice?: Float;
  deliveryDate?: DateTimeOutput;
  remarks?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ShippingItemPromise
  extends Promise<ShippingItem>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  shipping: <T = ShippingPromise>() => T;
  productId: () => Promise<ID_Output>;
  warehouseId: () => Promise<ID_Output>;
  expiryDate: () => Promise<DateTimeOutput>;
  labelFrom: () => Promise<String>;
  labelTo: () => Promise<String>;
  expectedQuantity: () => Promise<Int>;
  quantity: () => Promise<Int>;
  price: () => Promise<Float>;
  totalPrice: () => Promise<Float>;
  deliveryDate: () => Promise<DateTimeOutput>;
  remarks: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ShippingItemSubscription
  extends Promise<AsyncIterator<ShippingItem>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  shipping: <T = ShippingSubscription>() => T;
  productId: () => Promise<AsyncIterator<ID_Output>>;
  warehouseId: () => Promise<AsyncIterator<ID_Output>>;
  expiryDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  labelFrom: () => Promise<AsyncIterator<String>>;
  labelTo: () => Promise<AsyncIterator<String>>;
  expectedQuantity: () => Promise<AsyncIterator<Int>>;
  quantity: () => Promise<AsyncIterator<Int>>;
  price: () => Promise<AsyncIterator<Float>>;
  totalPrice: () => Promise<AsyncIterator<Float>>;
  deliveryDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  remarks: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ShippingItemNullablePromise
  extends Promise<ShippingItem | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  shipping: <T = ShippingPromise>() => T;
  productId: () => Promise<ID_Output>;
  warehouseId: () => Promise<ID_Output>;
  expiryDate: () => Promise<DateTimeOutput>;
  labelFrom: () => Promise<String>;
  labelTo: () => Promise<String>;
  expectedQuantity: () => Promise<Int>;
  quantity: () => Promise<Int>;
  price: () => Promise<Float>;
  totalPrice: () => Promise<Float>;
  deliveryDate: () => Promise<DateTimeOutput>;
  remarks: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ShippingEdge {
  node: Shipping;
  cursor: String;
}

export interface ShippingEdgePromise
  extends Promise<ShippingEdge>,
    Fragmentable {
  node: <T = ShippingPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ShippingEdgeSubscription
  extends Promise<AsyncIterator<ShippingEdge>>,
    Fragmentable {
  node: <T = ShippingSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface Shipping {
  id: ID_Output;
  code: String;
  purchaseOrderId: ID_Output;
  userId?: ID_Output;
  deliveryAt?: DateTimeOutput;
  unfinishedTax?: Float;
  totalPrice?: Float;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  state?: ShippingState;
}

export interface ShippingPromise extends Promise<Shipping>, Fragmentable {
  id: () => Promise<ID_Output>;
  code: () => Promise<String>;
  purchaseOrderId: () => Promise<ID_Output>;
  userId: () => Promise<ID_Output>;
  deliveryAt: () => Promise<DateTimeOutput>;
  unfinishedTax: () => Promise<Float>;
  totalPrice: () => Promise<Float>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  products: <T = FragmentableArray<ShippingItem>>(args?: {
    where?: ShippingItemWhereInput;
    orderBy?: ShippingItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  state: () => Promise<ShippingState>;
}

export interface ShippingSubscription
  extends Promise<AsyncIterator<Shipping>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  code: () => Promise<AsyncIterator<String>>;
  purchaseOrderId: () => Promise<AsyncIterator<ID_Output>>;
  userId: () => Promise<AsyncIterator<ID_Output>>;
  deliveryAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  unfinishedTax: () => Promise<AsyncIterator<Float>>;
  totalPrice: () => Promise<AsyncIterator<Float>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  products: <T = Promise<AsyncIterator<ShippingItemSubscription>>>(args?: {
    where?: ShippingItemWhereInput;
    orderBy?: ShippingItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  state: () => Promise<AsyncIterator<ShippingState>>;
}

export interface ShippingNullablePromise
  extends Promise<Shipping | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  code: () => Promise<String>;
  purchaseOrderId: () => Promise<ID_Output>;
  userId: () => Promise<ID_Output>;
  deliveryAt: () => Promise<DateTimeOutput>;
  unfinishedTax: () => Promise<Float>;
  totalPrice: () => Promise<Float>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  products: <T = FragmentableArray<ShippingItem>>(args?: {
    where?: ShippingItemWhereInput;
    orderBy?: ShippingItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  state: () => Promise<ShippingState>;
}

export interface ShippingConnection {
  pageInfo: PageInfo;
  edges: ShippingEdge[];
}

export interface ShippingConnectionPromise
  extends Promise<ShippingConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ShippingEdge>>() => T;
  aggregate: <T = AggregateShippingPromise>() => T;
}

export interface ShippingConnectionSubscription
  extends Promise<AsyncIterator<ShippingConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ShippingEdgeSubscription>>>() => T;
  aggregate: <T = AggregateShippingSubscription>() => T;
}

export interface ShippingSubscriptionPayload {
  mutation: MutationType;
  node: Shipping;
  updatedFields: String[];
  previousValues: ShippingPreviousValues;
}

export interface ShippingSubscriptionPayloadPromise
  extends Promise<ShippingSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ShippingPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ShippingPreviousValuesPromise>() => T;
}

export interface ShippingSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ShippingSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ShippingSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ShippingPreviousValuesSubscription>() => T;
}

export interface ShippingPreviousValues {
  id: ID_Output;
  code: String;
  purchaseOrderId: ID_Output;
  userId?: ID_Output;
  deliveryAt?: DateTimeOutput;
  unfinishedTax?: Float;
  totalPrice?: Float;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  state?: ShippingState;
}

export interface ShippingPreviousValuesPromise
  extends Promise<ShippingPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  code: () => Promise<String>;
  purchaseOrderId: () => Promise<ID_Output>;
  userId: () => Promise<ID_Output>;
  deliveryAt: () => Promise<DateTimeOutput>;
  unfinishedTax: () => Promise<Float>;
  totalPrice: () => Promise<Float>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  state: () => Promise<ShippingState>;
}

export interface ShippingPreviousValuesSubscription
  extends Promise<AsyncIterator<ShippingPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  code: () => Promise<AsyncIterator<String>>;
  purchaseOrderId: () => Promise<AsyncIterator<ID_Output>>;
  userId: () => Promise<AsyncIterator<ID_Output>>;
  deliveryAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  unfinishedTax: () => Promise<AsyncIterator<Float>>;
  totalPrice: () => Promise<AsyncIterator<Float>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  state: () => Promise<AsyncIterator<ShippingState>>;
}

export interface ShippingItemSubscriptionPayload {
  mutation: MutationType;
  node: ShippingItem;
  updatedFields: String[];
  previousValues: ShippingItemPreviousValues;
}

export interface ShippingItemSubscriptionPayloadPromise
  extends Promise<ShippingItemSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ShippingItemPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ShippingItemPreviousValuesPromise>() => T;
}

export interface ShippingItemSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ShippingItemSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ShippingItemSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ShippingItemPreviousValuesSubscription>() => T;
}

export interface AggregateShippingItem {
  count: Int;
}

export interface AggregateShippingItemPromise
  extends Promise<AggregateShippingItem>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateShippingItemSubscription
  extends Promise<AsyncIterator<AggregateShippingItem>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ShippingItemConnection {
  pageInfo: PageInfo;
  edges: ShippingItemEdge[];
}

export interface ShippingItemConnectionPromise
  extends Promise<ShippingItemConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ShippingItemEdge>>() => T;
  aggregate: <T = AggregateShippingItemPromise>() => T;
}

export interface ShippingItemConnectionSubscription
  extends Promise<AsyncIterator<ShippingItemConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ShippingItemEdgeSubscription>>>() => T;
  aggregate: <T = AggregateShippingItemSubscription>() => T;
}

export interface ShippingItemEdge {
  node: ShippingItem;
  cursor: String;
}

export interface ShippingItemEdgePromise
  extends Promise<ShippingItemEdge>,
    Fragmentable {
  node: <T = ShippingItemPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ShippingItemEdgeSubscription
  extends Promise<AsyncIterator<ShippingItemEdge>>,
    Fragmentable {
  node: <T = ShippingItemSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).
*/
export type Float = number;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

export type Long = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Shipping",
    embedded: false
  },
  {
    name: "ShippingItem",
    embedded: false
  },
  {
    name: "ShippingState",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
