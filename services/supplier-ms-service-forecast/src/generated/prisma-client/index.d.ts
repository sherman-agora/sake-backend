// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  forecastProduct: (where?: ForecastProductWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  forecastProduct: (
    where: ForecastProductWhereUniqueInput
  ) => ForecastProductNullablePromise;
  forecastProducts: (args?: {
    where?: ForecastProductWhereInput;
    orderBy?: ForecastProductOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ForecastProduct>;
  forecastProductsConnection: (args?: {
    where?: ForecastProductWhereInput;
    orderBy?: ForecastProductOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ForecastProductConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createForecastProduct: (
    data: ForecastProductCreateInput
  ) => ForecastProductPromise;
  updateForecastProduct: (args: {
    data: ForecastProductUpdateInput;
    where: ForecastProductWhereUniqueInput;
  }) => ForecastProductPromise;
  updateManyForecastProducts: (args: {
    data: ForecastProductUpdateManyMutationInput;
    where?: ForecastProductWhereInput;
  }) => BatchPayloadPromise;
  upsertForecastProduct: (args: {
    where: ForecastProductWhereUniqueInput;
    create: ForecastProductCreateInput;
    update: ForecastProductUpdateInput;
  }) => ForecastProductPromise;
  deleteForecastProduct: (
    where: ForecastProductWhereUniqueInput
  ) => ForecastProductPromise;
  deleteManyForecastProducts: (
    where?: ForecastProductWhereInput
  ) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  forecastProduct: (
    where?: ForecastProductSubscriptionWhereInput
  ) => ForecastProductSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type ForecastProductOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "productId_ASC"
  | "productId_DESC"
  | "monthlySalesOnAverage_ASC"
  | "monthlySalesOnAverage_DESC"
  | "numberOfMonth_ASC"
  | "numberOfMonth_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface ForecastProductCreateInput {
  id?: Maybe<ID_Input>;
  productId: ID_Input;
  monthlySalesOnAverage: Float;
  numberOfMonth: Int;
}

export interface ForecastProductUpdateInput {
  productId?: Maybe<ID_Input>;
  monthlySalesOnAverage?: Maybe<Float>;
  numberOfMonth?: Maybe<Int>;
}

export interface ForecastProductWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  productId?: Maybe<ID_Input>;
  productId_not?: Maybe<ID_Input>;
  productId_in?: Maybe<ID_Input[] | ID_Input>;
  productId_not_in?: Maybe<ID_Input[] | ID_Input>;
  productId_lt?: Maybe<ID_Input>;
  productId_lte?: Maybe<ID_Input>;
  productId_gt?: Maybe<ID_Input>;
  productId_gte?: Maybe<ID_Input>;
  productId_contains?: Maybe<ID_Input>;
  productId_not_contains?: Maybe<ID_Input>;
  productId_starts_with?: Maybe<ID_Input>;
  productId_not_starts_with?: Maybe<ID_Input>;
  productId_ends_with?: Maybe<ID_Input>;
  productId_not_ends_with?: Maybe<ID_Input>;
  monthlySalesOnAverage?: Maybe<Float>;
  monthlySalesOnAverage_not?: Maybe<Float>;
  monthlySalesOnAverage_in?: Maybe<Float[] | Float>;
  monthlySalesOnAverage_not_in?: Maybe<Float[] | Float>;
  monthlySalesOnAverage_lt?: Maybe<Float>;
  monthlySalesOnAverage_lte?: Maybe<Float>;
  monthlySalesOnAverage_gt?: Maybe<Float>;
  monthlySalesOnAverage_gte?: Maybe<Float>;
  numberOfMonth?: Maybe<Int>;
  numberOfMonth_not?: Maybe<Int>;
  numberOfMonth_in?: Maybe<Int[] | Int>;
  numberOfMonth_not_in?: Maybe<Int[] | Int>;
  numberOfMonth_lt?: Maybe<Int>;
  numberOfMonth_lte?: Maybe<Int>;
  numberOfMonth_gt?: Maybe<Int>;
  numberOfMonth_gte?: Maybe<Int>;
  AND?: Maybe<ForecastProductWhereInput[] | ForecastProductWhereInput>;
  OR?: Maybe<ForecastProductWhereInput[] | ForecastProductWhereInput>;
  NOT?: Maybe<ForecastProductWhereInput[] | ForecastProductWhereInput>;
}

export interface ForecastProductUpdateManyMutationInput {
  productId?: Maybe<ID_Input>;
  monthlySalesOnAverage?: Maybe<Float>;
  numberOfMonth?: Maybe<Int>;
}

export interface ForecastProductSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ForecastProductWhereInput>;
  AND?: Maybe<
    | ForecastProductSubscriptionWhereInput[]
    | ForecastProductSubscriptionWhereInput
  >;
  OR?: Maybe<
    | ForecastProductSubscriptionWhereInput[]
    | ForecastProductSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | ForecastProductSubscriptionWhereInput[]
    | ForecastProductSubscriptionWhereInput
  >;
}

export type ForecastProductWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  productId?: Maybe<ID_Input>;
}>;

export interface NodeNode {
  id: ID_Output;
}

export interface ForecastProductEdge {
  node: ForecastProduct;
  cursor: String;
}

export interface ForecastProductEdgePromise
  extends Promise<ForecastProductEdge>,
    Fragmentable {
  node: <T = ForecastProductPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ForecastProductEdgeSubscription
  extends Promise<AsyncIterator<ForecastProductEdge>>,
    Fragmentable {
  node: <T = ForecastProductSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface ForecastProduct {
  id: ID_Output;
  productId: ID_Output;
  monthlySalesOnAverage: Float;
  numberOfMonth: Int;
}

export interface ForecastProductPromise
  extends Promise<ForecastProduct>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  productId: () => Promise<ID_Output>;
  monthlySalesOnAverage: () => Promise<Float>;
  numberOfMonth: () => Promise<Int>;
}

export interface ForecastProductSubscription
  extends Promise<AsyncIterator<ForecastProduct>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  productId: () => Promise<AsyncIterator<ID_Output>>;
  monthlySalesOnAverage: () => Promise<AsyncIterator<Float>>;
  numberOfMonth: () => Promise<AsyncIterator<Int>>;
}

export interface ForecastProductNullablePromise
  extends Promise<ForecastProduct | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  productId: () => Promise<ID_Output>;
  monthlySalesOnAverage: () => Promise<Float>;
  numberOfMonth: () => Promise<Int>;
}

export interface ForecastProductSubscriptionPayload {
  mutation: MutationType;
  node: ForecastProduct;
  updatedFields: String[];
  previousValues: ForecastProductPreviousValues;
}

export interface ForecastProductSubscriptionPayloadPromise
  extends Promise<ForecastProductSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ForecastProductPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ForecastProductPreviousValuesPromise>() => T;
}

export interface ForecastProductSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ForecastProductSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ForecastProductSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ForecastProductPreviousValuesSubscription>() => T;
}

export interface ForecastProductConnection {
  pageInfo: PageInfo;
  edges: ForecastProductEdge[];
}

export interface ForecastProductConnectionPromise
  extends Promise<ForecastProductConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ForecastProductEdge>>() => T;
  aggregate: <T = AggregateForecastProductPromise>() => T;
}

export interface ForecastProductConnectionSubscription
  extends Promise<AsyncIterator<ForecastProductConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ForecastProductEdgeSubscription>>>() => T;
  aggregate: <T = AggregateForecastProductSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateForecastProduct {
  count: Int;
}

export interface AggregateForecastProductPromise
  extends Promise<AggregateForecastProduct>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateForecastProductSubscription
  extends Promise<AsyncIterator<AggregateForecastProduct>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ForecastProductPreviousValues {
  id: ID_Output;
  productId: ID_Output;
  monthlySalesOnAverage: Float;
  numberOfMonth: Int;
}

export interface ForecastProductPreviousValuesPromise
  extends Promise<ForecastProductPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  productId: () => Promise<ID_Output>;
  monthlySalesOnAverage: () => Promise<Float>;
  numberOfMonth: () => Promise<Int>;
}

export interface ForecastProductPreviousValuesSubscription
  extends Promise<AsyncIterator<ForecastProductPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  productId: () => Promise<AsyncIterator<ID_Output>>;
  monthlySalesOnAverage: () => Promise<AsyncIterator<Float>>;
  numberOfMonth: () => Promise<AsyncIterator<Int>>;
}

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).
*/
export type Float = number;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "ForecastProduct",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
