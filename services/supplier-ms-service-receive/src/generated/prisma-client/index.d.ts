// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  receivePayment: (where?: ReceivePaymentWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  receivePayment: (
    where: ReceivePaymentWhereUniqueInput
  ) => ReceivePaymentNullablePromise;
  receivePayments: (args?: {
    where?: ReceivePaymentWhereInput;
    orderBy?: ReceivePaymentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ReceivePayment>;
  receivePaymentsConnection: (args?: {
    where?: ReceivePaymentWhereInput;
    orderBy?: ReceivePaymentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ReceivePaymentConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createReceivePayment: (
    data: ReceivePaymentCreateInput
  ) => ReceivePaymentPromise;
  updateReceivePayment: (args: {
    data: ReceivePaymentUpdateInput;
    where: ReceivePaymentWhereUniqueInput;
  }) => ReceivePaymentPromise;
  updateManyReceivePayments: (args: {
    data: ReceivePaymentUpdateManyMutationInput;
    where?: ReceivePaymentWhereInput;
  }) => BatchPayloadPromise;
  upsertReceivePayment: (args: {
    where: ReceivePaymentWhereUniqueInput;
    create: ReceivePaymentCreateInput;
    update: ReceivePaymentUpdateInput;
  }) => ReceivePaymentPromise;
  deleteReceivePayment: (
    where: ReceivePaymentWhereUniqueInput
  ) => ReceivePaymentPromise;
  deleteManyReceivePayments: (
    where?: ReceivePaymentWhereInput
  ) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  receivePayment: (
    where?: ReceivePaymentSubscriptionWhereInput
  ) => ReceivePaymentSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type ReceivePaymentState = "CREATED" | "DELETED";

export type ReceivePaymentOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "invoiceId_ASC"
  | "invoiceId_DESC"
  | "deliveryNoteId_ASC"
  | "deliveryNoteId_DESC"
  | "userId_ASC"
  | "userId_DESC"
  | "paymentMethod_ASC"
  | "paymentMethod_DESC"
  | "paidAt_ASC"
  | "paidAt_DESC"
  | "state_ASC"
  | "state_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type PaymentType = "COD" | "CREDIT" | "DEBIT";

export interface ReceivePaymentWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  invoiceId?: Maybe<ID_Input>;
  invoiceId_not?: Maybe<ID_Input>;
  invoiceId_in?: Maybe<ID_Input[] | ID_Input>;
  invoiceId_not_in?: Maybe<ID_Input[] | ID_Input>;
  invoiceId_lt?: Maybe<ID_Input>;
  invoiceId_lte?: Maybe<ID_Input>;
  invoiceId_gt?: Maybe<ID_Input>;
  invoiceId_gte?: Maybe<ID_Input>;
  invoiceId_contains?: Maybe<ID_Input>;
  invoiceId_not_contains?: Maybe<ID_Input>;
  invoiceId_starts_with?: Maybe<ID_Input>;
  invoiceId_not_starts_with?: Maybe<ID_Input>;
  invoiceId_ends_with?: Maybe<ID_Input>;
  invoiceId_not_ends_with?: Maybe<ID_Input>;
  deliveryNoteId?: Maybe<ID_Input>;
  deliveryNoteId_not?: Maybe<ID_Input>;
  deliveryNoteId_in?: Maybe<ID_Input[] | ID_Input>;
  deliveryNoteId_not_in?: Maybe<ID_Input[] | ID_Input>;
  deliveryNoteId_lt?: Maybe<ID_Input>;
  deliveryNoteId_lte?: Maybe<ID_Input>;
  deliveryNoteId_gt?: Maybe<ID_Input>;
  deliveryNoteId_gte?: Maybe<ID_Input>;
  deliveryNoteId_contains?: Maybe<ID_Input>;
  deliveryNoteId_not_contains?: Maybe<ID_Input>;
  deliveryNoteId_starts_with?: Maybe<ID_Input>;
  deliveryNoteId_not_starts_with?: Maybe<ID_Input>;
  deliveryNoteId_ends_with?: Maybe<ID_Input>;
  deliveryNoteId_not_ends_with?: Maybe<ID_Input>;
  userId?: Maybe<ID_Input>;
  userId_not?: Maybe<ID_Input>;
  userId_in?: Maybe<ID_Input[] | ID_Input>;
  userId_not_in?: Maybe<ID_Input[] | ID_Input>;
  userId_lt?: Maybe<ID_Input>;
  userId_lte?: Maybe<ID_Input>;
  userId_gt?: Maybe<ID_Input>;
  userId_gte?: Maybe<ID_Input>;
  userId_contains?: Maybe<ID_Input>;
  userId_not_contains?: Maybe<ID_Input>;
  userId_starts_with?: Maybe<ID_Input>;
  userId_not_starts_with?: Maybe<ID_Input>;
  userId_ends_with?: Maybe<ID_Input>;
  userId_not_ends_with?: Maybe<ID_Input>;
  paymentMethod?: Maybe<PaymentType>;
  paymentMethod_not?: Maybe<PaymentType>;
  paymentMethod_in?: Maybe<PaymentType[] | PaymentType>;
  paymentMethod_not_in?: Maybe<PaymentType[] | PaymentType>;
  paidAt?: Maybe<DateTimeInput>;
  paidAt_not?: Maybe<DateTimeInput>;
  paidAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  paidAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  paidAt_lt?: Maybe<DateTimeInput>;
  paidAt_lte?: Maybe<DateTimeInput>;
  paidAt_gt?: Maybe<DateTimeInput>;
  paidAt_gte?: Maybe<DateTimeInput>;
  state?: Maybe<ReceivePaymentState>;
  state_not?: Maybe<ReceivePaymentState>;
  state_in?: Maybe<ReceivePaymentState[] | ReceivePaymentState>;
  state_not_in?: Maybe<ReceivePaymentState[] | ReceivePaymentState>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ReceivePaymentWhereInput[] | ReceivePaymentWhereInput>;
  OR?: Maybe<ReceivePaymentWhereInput[] | ReceivePaymentWhereInput>;
  NOT?: Maybe<ReceivePaymentWhereInput[] | ReceivePaymentWhereInput>;
}

export type ReceivePaymentWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ReceivePaymentCreateInput {
  id?: Maybe<ID_Input>;
  invoiceId: ID_Input;
  deliveryNoteId?: Maybe<ID_Input>;
  userId?: Maybe<ID_Input>;
  paymentMethod: PaymentType;
  paidAt: DateTimeInput;
  state?: Maybe<ReceivePaymentState>;
}

export interface ReceivePaymentUpdateInput {
  invoiceId?: Maybe<ID_Input>;
  deliveryNoteId?: Maybe<ID_Input>;
  userId?: Maybe<ID_Input>;
  paymentMethod?: Maybe<PaymentType>;
  paidAt?: Maybe<DateTimeInput>;
  state?: Maybe<ReceivePaymentState>;
}

export interface ReceivePaymentUpdateManyMutationInput {
  invoiceId?: Maybe<ID_Input>;
  deliveryNoteId?: Maybe<ID_Input>;
  userId?: Maybe<ID_Input>;
  paymentMethod?: Maybe<PaymentType>;
  paidAt?: Maybe<DateTimeInput>;
  state?: Maybe<ReceivePaymentState>;
}

export interface ReceivePaymentSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ReceivePaymentWhereInput>;
  AND?: Maybe<
    | ReceivePaymentSubscriptionWhereInput[]
    | ReceivePaymentSubscriptionWhereInput
  >;
  OR?: Maybe<
    | ReceivePaymentSubscriptionWhereInput[]
    | ReceivePaymentSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | ReceivePaymentSubscriptionWhereInput[]
    | ReceivePaymentSubscriptionWhereInput
  >;
}

export interface NodeNode {
  id: ID_Output;
}

export interface ReceivePaymentPreviousValues {
  id: ID_Output;
  invoiceId: ID_Output;
  deliveryNoteId?: ID_Output;
  userId?: ID_Output;
  paymentMethod: PaymentType;
  paidAt: DateTimeOutput;
  state?: ReceivePaymentState;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ReceivePaymentPreviousValuesPromise
  extends Promise<ReceivePaymentPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  invoiceId: () => Promise<ID_Output>;
  deliveryNoteId: () => Promise<ID_Output>;
  userId: () => Promise<ID_Output>;
  paymentMethod: () => Promise<PaymentType>;
  paidAt: () => Promise<DateTimeOutput>;
  state: () => Promise<ReceivePaymentState>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ReceivePaymentPreviousValuesSubscription
  extends Promise<AsyncIterator<ReceivePaymentPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  invoiceId: () => Promise<AsyncIterator<ID_Output>>;
  deliveryNoteId: () => Promise<AsyncIterator<ID_Output>>;
  userId: () => Promise<AsyncIterator<ID_Output>>;
  paymentMethod: () => Promise<AsyncIterator<PaymentType>>;
  paidAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  state: () => Promise<AsyncIterator<ReceivePaymentState>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ReceivePayment {
  id: ID_Output;
  invoiceId: ID_Output;
  deliveryNoteId?: ID_Output;
  userId?: ID_Output;
  paymentMethod: PaymentType;
  paidAt: DateTimeOutput;
  state?: ReceivePaymentState;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ReceivePaymentPromise
  extends Promise<ReceivePayment>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  invoiceId: () => Promise<ID_Output>;
  deliveryNoteId: () => Promise<ID_Output>;
  userId: () => Promise<ID_Output>;
  paymentMethod: () => Promise<PaymentType>;
  paidAt: () => Promise<DateTimeOutput>;
  state: () => Promise<ReceivePaymentState>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ReceivePaymentSubscription
  extends Promise<AsyncIterator<ReceivePayment>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  invoiceId: () => Promise<AsyncIterator<ID_Output>>;
  deliveryNoteId: () => Promise<AsyncIterator<ID_Output>>;
  userId: () => Promise<AsyncIterator<ID_Output>>;
  paymentMethod: () => Promise<AsyncIterator<PaymentType>>;
  paidAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  state: () => Promise<AsyncIterator<ReceivePaymentState>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ReceivePaymentNullablePromise
  extends Promise<ReceivePayment | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  invoiceId: () => Promise<ID_Output>;
  deliveryNoteId: () => Promise<ID_Output>;
  userId: () => Promise<ID_Output>;
  paymentMethod: () => Promise<PaymentType>;
  paidAt: () => Promise<DateTimeOutput>;
  state: () => Promise<ReceivePaymentState>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface ReceivePaymentEdge {
  node: ReceivePayment;
  cursor: String;
}

export interface ReceivePaymentEdgePromise
  extends Promise<ReceivePaymentEdge>,
    Fragmentable {
  node: <T = ReceivePaymentPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ReceivePaymentEdgeSubscription
  extends Promise<AsyncIterator<ReceivePaymentEdge>>,
    Fragmentable {
  node: <T = ReceivePaymentSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ReceivePaymentSubscriptionPayload {
  mutation: MutationType;
  node: ReceivePayment;
  updatedFields: String[];
  previousValues: ReceivePaymentPreviousValues;
}

export interface ReceivePaymentSubscriptionPayloadPromise
  extends Promise<ReceivePaymentSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ReceivePaymentPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ReceivePaymentPreviousValuesPromise>() => T;
}

export interface ReceivePaymentSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ReceivePaymentSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ReceivePaymentSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ReceivePaymentPreviousValuesSubscription>() => T;
}

export interface ReceivePaymentConnection {
  pageInfo: PageInfo;
  edges: ReceivePaymentEdge[];
}

export interface ReceivePaymentConnectionPromise
  extends Promise<ReceivePaymentConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ReceivePaymentEdge>>() => T;
  aggregate: <T = AggregateReceivePaymentPromise>() => T;
}

export interface ReceivePaymentConnectionSubscription
  extends Promise<AsyncIterator<ReceivePaymentConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ReceivePaymentEdgeSubscription>>>() => T;
  aggregate: <T = AggregateReceivePaymentSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateReceivePayment {
  count: Int;
}

export interface AggregateReceivePaymentPromise
  extends Promise<AggregateReceivePayment>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateReceivePaymentSubscription
  extends Promise<AsyncIterator<AggregateReceivePayment>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

export type Long = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "ReceivePayment",
    embedded: false
  },
  {
    name: "PaymentType",
    embedded: false
  },
  {
    name: "ReceivePaymentState",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
