// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  invoice: (where?: InvoiceWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  invoice: (where: InvoiceWhereUniqueInput) => InvoiceNullablePromise;
  invoices: (args?: {
    where?: InvoiceWhereInput;
    orderBy?: InvoiceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Invoice>;
  invoicesConnection: (args?: {
    where?: InvoiceWhereInput;
    orderBy?: InvoiceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => InvoiceConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createInvoice: (data: InvoiceCreateInput) => InvoicePromise;
  updateInvoice: (args: {
    data: InvoiceUpdateInput;
    where: InvoiceWhereUniqueInput;
  }) => InvoicePromise;
  updateManyInvoices: (args: {
    data: InvoiceUpdateManyMutationInput;
    where?: InvoiceWhereInput;
  }) => BatchPayloadPromise;
  upsertInvoice: (args: {
    where: InvoiceWhereUniqueInput;
    create: InvoiceCreateInput;
    update: InvoiceUpdateInput;
  }) => InvoicePromise;
  deleteInvoice: (where: InvoiceWhereUniqueInput) => InvoicePromise;
  deleteManyInvoices: (where?: InvoiceWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  invoice: (
    where?: InvoiceSubscriptionWhereInput
  ) => InvoiceSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type InvoicePaymentStatus =
  | "UNPAID"
  | "PENDING"
  | "PARTIAL_PAID"
  | "PAID"
  | "OUTSTANDING"
  | "OVERDUE";

export type InvoiceStatus =
  | "DRAFT"
  | "APPROVED"
  | "CONFIRMED"
  | "DELIVERED"
  | "PAID"
  | "DELETED";

export type InvoiceOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "code_ASC"
  | "code_DESC"
  | "salesOrderId_ASC"
  | "salesOrderId_DESC"
  | "userId_ASC"
  | "userId_DESC"
  | "state_ASC"
  | "state_DESC"
  | "paymentStatus_ASC"
  | "paymentStatus_DESC"
  | "totalPrice_ASC"
  | "totalPrice_DESC"
  | "title_ASC"
  | "title_DESC"
  | "remark_ASC"
  | "remark_DESC"
  | "shipmentDate_ASC"
  | "shipmentDate_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "paidAt_ASC"
  | "paidAt_DESC";

export interface InvoiceUpdateManyMutationInput {
  code?: Maybe<String>;
  salesOrderId?: Maybe<ID_Input>;
  userId?: Maybe<ID_Input>;
  state?: Maybe<InvoiceStatus>;
  paymentStatus?: Maybe<InvoicePaymentStatus>;
  totalPrice?: Maybe<Float>;
  title?: Maybe<String>;
  remark?: Maybe<String>;
  shipmentDate?: Maybe<DateTimeInput>;
  paidAt?: Maybe<DateTimeInput>;
}

export type InvoiceWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  code?: Maybe<String>;
}>;

export interface InvoiceCreateInput {
  id?: Maybe<ID_Input>;
  code: String;
  salesOrderId: ID_Input;
  userId?: Maybe<ID_Input>;
  state: InvoiceStatus;
  paymentStatus: InvoicePaymentStatus;
  totalPrice: Float;
  title?: Maybe<String>;
  remark?: Maybe<String>;
  shipmentDate: DateTimeInput;
  paidAt?: Maybe<DateTimeInput>;
}

export interface InvoiceSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<InvoiceWhereInput>;
  AND?: Maybe<InvoiceSubscriptionWhereInput[] | InvoiceSubscriptionWhereInput>;
  OR?: Maybe<InvoiceSubscriptionWhereInput[] | InvoiceSubscriptionWhereInput>;
  NOT?: Maybe<InvoiceSubscriptionWhereInput[] | InvoiceSubscriptionWhereInput>;
}

export interface InvoiceWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  code?: Maybe<String>;
  code_not?: Maybe<String>;
  code_in?: Maybe<String[] | String>;
  code_not_in?: Maybe<String[] | String>;
  code_lt?: Maybe<String>;
  code_lte?: Maybe<String>;
  code_gt?: Maybe<String>;
  code_gte?: Maybe<String>;
  code_contains?: Maybe<String>;
  code_not_contains?: Maybe<String>;
  code_starts_with?: Maybe<String>;
  code_not_starts_with?: Maybe<String>;
  code_ends_with?: Maybe<String>;
  code_not_ends_with?: Maybe<String>;
  salesOrderId?: Maybe<ID_Input>;
  salesOrderId_not?: Maybe<ID_Input>;
  salesOrderId_in?: Maybe<ID_Input[] | ID_Input>;
  salesOrderId_not_in?: Maybe<ID_Input[] | ID_Input>;
  salesOrderId_lt?: Maybe<ID_Input>;
  salesOrderId_lte?: Maybe<ID_Input>;
  salesOrderId_gt?: Maybe<ID_Input>;
  salesOrderId_gte?: Maybe<ID_Input>;
  salesOrderId_contains?: Maybe<ID_Input>;
  salesOrderId_not_contains?: Maybe<ID_Input>;
  salesOrderId_starts_with?: Maybe<ID_Input>;
  salesOrderId_not_starts_with?: Maybe<ID_Input>;
  salesOrderId_ends_with?: Maybe<ID_Input>;
  salesOrderId_not_ends_with?: Maybe<ID_Input>;
  userId?: Maybe<ID_Input>;
  userId_not?: Maybe<ID_Input>;
  userId_in?: Maybe<ID_Input[] | ID_Input>;
  userId_not_in?: Maybe<ID_Input[] | ID_Input>;
  userId_lt?: Maybe<ID_Input>;
  userId_lte?: Maybe<ID_Input>;
  userId_gt?: Maybe<ID_Input>;
  userId_gte?: Maybe<ID_Input>;
  userId_contains?: Maybe<ID_Input>;
  userId_not_contains?: Maybe<ID_Input>;
  userId_starts_with?: Maybe<ID_Input>;
  userId_not_starts_with?: Maybe<ID_Input>;
  userId_ends_with?: Maybe<ID_Input>;
  userId_not_ends_with?: Maybe<ID_Input>;
  state?: Maybe<InvoiceStatus>;
  state_not?: Maybe<InvoiceStatus>;
  state_in?: Maybe<InvoiceStatus[] | InvoiceStatus>;
  state_not_in?: Maybe<InvoiceStatus[] | InvoiceStatus>;
  paymentStatus?: Maybe<InvoicePaymentStatus>;
  paymentStatus_not?: Maybe<InvoicePaymentStatus>;
  paymentStatus_in?: Maybe<InvoicePaymentStatus[] | InvoicePaymentStatus>;
  paymentStatus_not_in?: Maybe<InvoicePaymentStatus[] | InvoicePaymentStatus>;
  totalPrice?: Maybe<Float>;
  totalPrice_not?: Maybe<Float>;
  totalPrice_in?: Maybe<Float[] | Float>;
  totalPrice_not_in?: Maybe<Float[] | Float>;
  totalPrice_lt?: Maybe<Float>;
  totalPrice_lte?: Maybe<Float>;
  totalPrice_gt?: Maybe<Float>;
  totalPrice_gte?: Maybe<Float>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  remark?: Maybe<String>;
  remark_not?: Maybe<String>;
  remark_in?: Maybe<String[] | String>;
  remark_not_in?: Maybe<String[] | String>;
  remark_lt?: Maybe<String>;
  remark_lte?: Maybe<String>;
  remark_gt?: Maybe<String>;
  remark_gte?: Maybe<String>;
  remark_contains?: Maybe<String>;
  remark_not_contains?: Maybe<String>;
  remark_starts_with?: Maybe<String>;
  remark_not_starts_with?: Maybe<String>;
  remark_ends_with?: Maybe<String>;
  remark_not_ends_with?: Maybe<String>;
  shipmentDate?: Maybe<DateTimeInput>;
  shipmentDate_not?: Maybe<DateTimeInput>;
  shipmentDate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  shipmentDate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  shipmentDate_lt?: Maybe<DateTimeInput>;
  shipmentDate_lte?: Maybe<DateTimeInput>;
  shipmentDate_gt?: Maybe<DateTimeInput>;
  shipmentDate_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  paidAt?: Maybe<DateTimeInput>;
  paidAt_not?: Maybe<DateTimeInput>;
  paidAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  paidAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  paidAt_lt?: Maybe<DateTimeInput>;
  paidAt_lte?: Maybe<DateTimeInput>;
  paidAt_gt?: Maybe<DateTimeInput>;
  paidAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<InvoiceWhereInput[] | InvoiceWhereInput>;
  OR?: Maybe<InvoiceWhereInput[] | InvoiceWhereInput>;
  NOT?: Maybe<InvoiceWhereInput[] | InvoiceWhereInput>;
}

export interface InvoiceUpdateInput {
  code?: Maybe<String>;
  salesOrderId?: Maybe<ID_Input>;
  userId?: Maybe<ID_Input>;
  state?: Maybe<InvoiceStatus>;
  paymentStatus?: Maybe<InvoicePaymentStatus>;
  totalPrice?: Maybe<Float>;
  title?: Maybe<String>;
  remark?: Maybe<String>;
  shipmentDate?: Maybe<DateTimeInput>;
  paidAt?: Maybe<DateTimeInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface InvoicePreviousValues {
  id: ID_Output;
  code: String;
  salesOrderId: ID_Output;
  userId?: ID_Output;
  state: InvoiceStatus;
  paymentStatus: InvoicePaymentStatus;
  totalPrice: Float;
  title?: String;
  remark?: String;
  shipmentDate: DateTimeOutput;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  paidAt?: DateTimeOutput;
}

export interface InvoicePreviousValuesPromise
  extends Promise<InvoicePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  code: () => Promise<String>;
  salesOrderId: () => Promise<ID_Output>;
  userId: () => Promise<ID_Output>;
  state: () => Promise<InvoiceStatus>;
  paymentStatus: () => Promise<InvoicePaymentStatus>;
  totalPrice: () => Promise<Float>;
  title: () => Promise<String>;
  remark: () => Promise<String>;
  shipmentDate: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  paidAt: () => Promise<DateTimeOutput>;
}

export interface InvoicePreviousValuesSubscription
  extends Promise<AsyncIterator<InvoicePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  code: () => Promise<AsyncIterator<String>>;
  salesOrderId: () => Promise<AsyncIterator<ID_Output>>;
  userId: () => Promise<AsyncIterator<ID_Output>>;
  state: () => Promise<AsyncIterator<InvoiceStatus>>;
  paymentStatus: () => Promise<AsyncIterator<InvoicePaymentStatus>>;
  totalPrice: () => Promise<AsyncIterator<Float>>;
  title: () => Promise<AsyncIterator<String>>;
  remark: () => Promise<AsyncIterator<String>>;
  shipmentDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  paidAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface Invoice {
  id: ID_Output;
  code: String;
  salesOrderId: ID_Output;
  userId?: ID_Output;
  state: InvoiceStatus;
  paymentStatus: InvoicePaymentStatus;
  totalPrice: Float;
  title?: String;
  remark?: String;
  shipmentDate: DateTimeOutput;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  paidAt?: DateTimeOutput;
}

export interface InvoicePromise extends Promise<Invoice>, Fragmentable {
  id: () => Promise<ID_Output>;
  code: () => Promise<String>;
  salesOrderId: () => Promise<ID_Output>;
  userId: () => Promise<ID_Output>;
  state: () => Promise<InvoiceStatus>;
  paymentStatus: () => Promise<InvoicePaymentStatus>;
  totalPrice: () => Promise<Float>;
  title: () => Promise<String>;
  remark: () => Promise<String>;
  shipmentDate: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  paidAt: () => Promise<DateTimeOutput>;
}

export interface InvoiceSubscription
  extends Promise<AsyncIterator<Invoice>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  code: () => Promise<AsyncIterator<String>>;
  salesOrderId: () => Promise<AsyncIterator<ID_Output>>;
  userId: () => Promise<AsyncIterator<ID_Output>>;
  state: () => Promise<AsyncIterator<InvoiceStatus>>;
  paymentStatus: () => Promise<AsyncIterator<InvoicePaymentStatus>>;
  totalPrice: () => Promise<AsyncIterator<Float>>;
  title: () => Promise<AsyncIterator<String>>;
  remark: () => Promise<AsyncIterator<String>>;
  shipmentDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  paidAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface InvoiceNullablePromise
  extends Promise<Invoice | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  code: () => Promise<String>;
  salesOrderId: () => Promise<ID_Output>;
  userId: () => Promise<ID_Output>;
  state: () => Promise<InvoiceStatus>;
  paymentStatus: () => Promise<InvoicePaymentStatus>;
  totalPrice: () => Promise<Float>;
  title: () => Promise<String>;
  remark: () => Promise<String>;
  shipmentDate: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  paidAt: () => Promise<DateTimeOutput>;
}

export interface InvoiceSubscriptionPayload {
  mutation: MutationType;
  node: Invoice;
  updatedFields: String[];
  previousValues: InvoicePreviousValues;
}

export interface InvoiceSubscriptionPayloadPromise
  extends Promise<InvoiceSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = InvoicePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = InvoicePreviousValuesPromise>() => T;
}

export interface InvoiceSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<InvoiceSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = InvoiceSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = InvoicePreviousValuesSubscription>() => T;
}

export interface InvoiceConnection {
  pageInfo: PageInfo;
  edges: InvoiceEdge[];
}

export interface InvoiceConnectionPromise
  extends Promise<InvoiceConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<InvoiceEdge>>() => T;
  aggregate: <T = AggregateInvoicePromise>() => T;
}

export interface InvoiceConnectionSubscription
  extends Promise<AsyncIterator<InvoiceConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<InvoiceEdgeSubscription>>>() => T;
  aggregate: <T = AggregateInvoiceSubscription>() => T;
}

export interface AggregateInvoice {
  count: Int;
}

export interface AggregateInvoicePromise
  extends Promise<AggregateInvoice>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateInvoiceSubscription
  extends Promise<AsyncIterator<AggregateInvoice>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface InvoiceEdge {
  node: Invoice;
  cursor: String;
}

export interface InvoiceEdgePromise extends Promise<InvoiceEdge>, Fragmentable {
  node: <T = InvoicePromise>() => T;
  cursor: () => Promise<String>;
}

export interface InvoiceEdgeSubscription
  extends Promise<AsyncIterator<InvoiceEdge>>,
    Fragmentable {
  node: <T = InvoiceSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).
*/
export type Float = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

export type Long = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Invoice",
    embedded: false
  },
  {
    name: "InvoiceStatus",
    embedded: false
  },
  {
    name: "InvoicePaymentStatus",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
