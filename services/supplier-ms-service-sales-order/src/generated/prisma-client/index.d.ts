// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  salesOrder: (where?: SalesOrderWhereInput) => Promise<boolean>;
  salesOrderItem: (where?: SalesOrderItemWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  salesOrder: (where: SalesOrderWhereUniqueInput) => SalesOrderNullablePromise;
  salesOrders: (args?: {
    where?: SalesOrderWhereInput;
    orderBy?: SalesOrderOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<SalesOrder>;
  salesOrdersConnection: (args?: {
    where?: SalesOrderWhereInput;
    orderBy?: SalesOrderOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => SalesOrderConnectionPromise;
  salesOrderItem: (
    where: SalesOrderItemWhereUniqueInput
  ) => SalesOrderItemNullablePromise;
  salesOrderItems: (args?: {
    where?: SalesOrderItemWhereInput;
    orderBy?: SalesOrderItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<SalesOrderItem>;
  salesOrderItemsConnection: (args?: {
    where?: SalesOrderItemWhereInput;
    orderBy?: SalesOrderItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => SalesOrderItemConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createSalesOrder: (data: SalesOrderCreateInput) => SalesOrderPromise;
  updateSalesOrder: (args: {
    data: SalesOrderUpdateInput;
    where: SalesOrderWhereUniqueInput;
  }) => SalesOrderPromise;
  updateManySalesOrders: (args: {
    data: SalesOrderUpdateManyMutationInput;
    where?: SalesOrderWhereInput;
  }) => BatchPayloadPromise;
  upsertSalesOrder: (args: {
    where: SalesOrderWhereUniqueInput;
    create: SalesOrderCreateInput;
    update: SalesOrderUpdateInput;
  }) => SalesOrderPromise;
  deleteSalesOrder: (where: SalesOrderWhereUniqueInput) => SalesOrderPromise;
  deleteManySalesOrders: (where?: SalesOrderWhereInput) => BatchPayloadPromise;
  createSalesOrderItem: (
    data: SalesOrderItemCreateInput
  ) => SalesOrderItemPromise;
  updateSalesOrderItem: (args: {
    data: SalesOrderItemUpdateInput;
    where: SalesOrderItemWhereUniqueInput;
  }) => SalesOrderItemPromise;
  updateManySalesOrderItems: (args: {
    data: SalesOrderItemUpdateManyMutationInput;
    where?: SalesOrderItemWhereInput;
  }) => BatchPayloadPromise;
  upsertSalesOrderItem: (args: {
    where: SalesOrderItemWhereUniqueInput;
    create: SalesOrderItemCreateInput;
    update: SalesOrderItemUpdateInput;
  }) => SalesOrderItemPromise;
  deleteSalesOrderItem: (
    where: SalesOrderItemWhereUniqueInput
  ) => SalesOrderItemPromise;
  deleteManySalesOrderItems: (
    where?: SalesOrderItemWhereInput
  ) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  salesOrder: (
    where?: SalesOrderSubscriptionWhereInput
  ) => SalesOrderSubscriptionPayloadSubscription;
  salesOrderItem: (
    where?: SalesOrderItemSubscriptionWhereInput
  ) => SalesOrderItemSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type SalesOrderStatus =
  | "RECEIVED"
  | "CONFIRMED"
  | "INVOICED"
  | "PACKED"
  | "SHIPPED"
  | "DELIVERED"
  | "PAID"
  | "DELETED";

export type SalesOrderItemOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "productId_ASC"
  | "productId_DESC"
  | "discount_ASC"
  | "discount_DESC"
  | "discountAmount_ASC"
  | "discountAmount_DESC"
  | "wholeSalePrice_ASC"
  | "wholeSalePrice_DESC"
  | "remarks_ASC"
  | "remarks_DESC"
  | "quantity_ASC"
  | "quantity_DESC"
  | "salesPlan_ASC"
  | "salesPlan_DESC"
  | "subPrice_ASC"
  | "subPrice_DESC"
  | "price_ASC"
  | "price_DESC"
  | "totalPrice_ASC"
  | "totalPrice_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type SalesOrderOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "code_ASC"
  | "code_DESC"
  | "title_ASC"
  | "title_DESC"
  | "remark_ASC"
  | "remark_DESC"
  | "discountAmount_ASC"
  | "discountAmount_DESC"
  | "couponDiscount_ASC"
  | "couponDiscount_DESC"
  | "discount_ASC"
  | "discount_DESC"
  | "subtotal_ASC"
  | "subtotal_DESC"
  | "grandTotal_ASC"
  | "grandTotal_DESC"
  | "state_ASC"
  | "state_DESC"
  | "userId_ASC"
  | "userId_DESC"
  | "shopId_ASC"
  | "shopId_DESC"
  | "shippingDate_ASC"
  | "shippingDate_DESC"
  | "actualDate_ASC"
  | "actualDate_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface SalesOrderUpdateInput {
  code?: Maybe<String>;
  title?: Maybe<String>;
  remark?: Maybe<String>;
  discountAmount?: Maybe<Float>;
  couponDiscount?: Maybe<Float>;
  discount?: Maybe<Float>;
  subtotal?: Maybe<Float>;
  grandTotal?: Maybe<Float>;
  state?: Maybe<SalesOrderStatus>;
  userId?: Maybe<ID_Input>;
  shopId?: Maybe<ID_Input>;
  products?: Maybe<SalesOrderItemUpdateManyWithoutSalesOrderInput>;
  shippingDate?: Maybe<String>;
  actualDate?: Maybe<DateTimeInput>;
}

export type SalesOrderWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  code?: Maybe<String>;
}>;

export interface SalesOrderItemUpdateWithoutSalesOrderDataInput {
  productId?: Maybe<ID_Input>;
  discount?: Maybe<String>;
  discountAmount?: Maybe<Float>;
  wholeSalePrice?: Maybe<Float>;
  remarks?: Maybe<String>;
  quantity?: Maybe<Int>;
  salesPlan?: Maybe<Int>;
  subPrice?: Maybe<Float>;
  price?: Maybe<Float>;
  totalPrice?: Maybe<Float>;
}

export interface SalesOrderItemWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  salesOrder?: Maybe<SalesOrderWhereInput>;
  productId?: Maybe<ID_Input>;
  productId_not?: Maybe<ID_Input>;
  productId_in?: Maybe<ID_Input[] | ID_Input>;
  productId_not_in?: Maybe<ID_Input[] | ID_Input>;
  productId_lt?: Maybe<ID_Input>;
  productId_lte?: Maybe<ID_Input>;
  productId_gt?: Maybe<ID_Input>;
  productId_gte?: Maybe<ID_Input>;
  productId_contains?: Maybe<ID_Input>;
  productId_not_contains?: Maybe<ID_Input>;
  productId_starts_with?: Maybe<ID_Input>;
  productId_not_starts_with?: Maybe<ID_Input>;
  productId_ends_with?: Maybe<ID_Input>;
  productId_not_ends_with?: Maybe<ID_Input>;
  discount?: Maybe<String>;
  discount_not?: Maybe<String>;
  discount_in?: Maybe<String[] | String>;
  discount_not_in?: Maybe<String[] | String>;
  discount_lt?: Maybe<String>;
  discount_lte?: Maybe<String>;
  discount_gt?: Maybe<String>;
  discount_gte?: Maybe<String>;
  discount_contains?: Maybe<String>;
  discount_not_contains?: Maybe<String>;
  discount_starts_with?: Maybe<String>;
  discount_not_starts_with?: Maybe<String>;
  discount_ends_with?: Maybe<String>;
  discount_not_ends_with?: Maybe<String>;
  discountAmount?: Maybe<Float>;
  discountAmount_not?: Maybe<Float>;
  discountAmount_in?: Maybe<Float[] | Float>;
  discountAmount_not_in?: Maybe<Float[] | Float>;
  discountAmount_lt?: Maybe<Float>;
  discountAmount_lte?: Maybe<Float>;
  discountAmount_gt?: Maybe<Float>;
  discountAmount_gte?: Maybe<Float>;
  wholeSalePrice?: Maybe<Float>;
  wholeSalePrice_not?: Maybe<Float>;
  wholeSalePrice_in?: Maybe<Float[] | Float>;
  wholeSalePrice_not_in?: Maybe<Float[] | Float>;
  wholeSalePrice_lt?: Maybe<Float>;
  wholeSalePrice_lte?: Maybe<Float>;
  wholeSalePrice_gt?: Maybe<Float>;
  wholeSalePrice_gte?: Maybe<Float>;
  remarks?: Maybe<String>;
  remarks_not?: Maybe<String>;
  remarks_in?: Maybe<String[] | String>;
  remarks_not_in?: Maybe<String[] | String>;
  remarks_lt?: Maybe<String>;
  remarks_lte?: Maybe<String>;
  remarks_gt?: Maybe<String>;
  remarks_gte?: Maybe<String>;
  remarks_contains?: Maybe<String>;
  remarks_not_contains?: Maybe<String>;
  remarks_starts_with?: Maybe<String>;
  remarks_not_starts_with?: Maybe<String>;
  remarks_ends_with?: Maybe<String>;
  remarks_not_ends_with?: Maybe<String>;
  quantity?: Maybe<Int>;
  quantity_not?: Maybe<Int>;
  quantity_in?: Maybe<Int[] | Int>;
  quantity_not_in?: Maybe<Int[] | Int>;
  quantity_lt?: Maybe<Int>;
  quantity_lte?: Maybe<Int>;
  quantity_gt?: Maybe<Int>;
  quantity_gte?: Maybe<Int>;
  salesPlan?: Maybe<Int>;
  salesPlan_not?: Maybe<Int>;
  salesPlan_in?: Maybe<Int[] | Int>;
  salesPlan_not_in?: Maybe<Int[] | Int>;
  salesPlan_lt?: Maybe<Int>;
  salesPlan_lte?: Maybe<Int>;
  salesPlan_gt?: Maybe<Int>;
  salesPlan_gte?: Maybe<Int>;
  subPrice?: Maybe<Float>;
  subPrice_not?: Maybe<Float>;
  subPrice_in?: Maybe<Float[] | Float>;
  subPrice_not_in?: Maybe<Float[] | Float>;
  subPrice_lt?: Maybe<Float>;
  subPrice_lte?: Maybe<Float>;
  subPrice_gt?: Maybe<Float>;
  subPrice_gte?: Maybe<Float>;
  price?: Maybe<Float>;
  price_not?: Maybe<Float>;
  price_in?: Maybe<Float[] | Float>;
  price_not_in?: Maybe<Float[] | Float>;
  price_lt?: Maybe<Float>;
  price_lte?: Maybe<Float>;
  price_gt?: Maybe<Float>;
  price_gte?: Maybe<Float>;
  totalPrice?: Maybe<Float>;
  totalPrice_not?: Maybe<Float>;
  totalPrice_in?: Maybe<Float[] | Float>;
  totalPrice_not_in?: Maybe<Float[] | Float>;
  totalPrice_lt?: Maybe<Float>;
  totalPrice_lte?: Maybe<Float>;
  totalPrice_gt?: Maybe<Float>;
  totalPrice_gte?: Maybe<Float>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<SalesOrderItemWhereInput[] | SalesOrderItemWhereInput>;
  OR?: Maybe<SalesOrderItemWhereInput[] | SalesOrderItemWhereInput>;
  NOT?: Maybe<SalesOrderItemWhereInput[] | SalesOrderItemWhereInput>;
}

export interface SalesOrderItemCreateInput {
  id?: Maybe<ID_Input>;
  salesOrder: SalesOrderCreateOneWithoutProductsInput;
  productId: ID_Input;
  discount?: Maybe<String>;
  discountAmount?: Maybe<Float>;
  wholeSalePrice?: Maybe<Float>;
  remarks?: Maybe<String>;
  quantity: Int;
  salesPlan?: Maybe<Int>;
  subPrice?: Maybe<Float>;
  price: Float;
  totalPrice: Float;
}

export interface SalesOrderItemScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  productId?: Maybe<ID_Input>;
  productId_not?: Maybe<ID_Input>;
  productId_in?: Maybe<ID_Input[] | ID_Input>;
  productId_not_in?: Maybe<ID_Input[] | ID_Input>;
  productId_lt?: Maybe<ID_Input>;
  productId_lte?: Maybe<ID_Input>;
  productId_gt?: Maybe<ID_Input>;
  productId_gte?: Maybe<ID_Input>;
  productId_contains?: Maybe<ID_Input>;
  productId_not_contains?: Maybe<ID_Input>;
  productId_starts_with?: Maybe<ID_Input>;
  productId_not_starts_with?: Maybe<ID_Input>;
  productId_ends_with?: Maybe<ID_Input>;
  productId_not_ends_with?: Maybe<ID_Input>;
  discount?: Maybe<String>;
  discount_not?: Maybe<String>;
  discount_in?: Maybe<String[] | String>;
  discount_not_in?: Maybe<String[] | String>;
  discount_lt?: Maybe<String>;
  discount_lte?: Maybe<String>;
  discount_gt?: Maybe<String>;
  discount_gte?: Maybe<String>;
  discount_contains?: Maybe<String>;
  discount_not_contains?: Maybe<String>;
  discount_starts_with?: Maybe<String>;
  discount_not_starts_with?: Maybe<String>;
  discount_ends_with?: Maybe<String>;
  discount_not_ends_with?: Maybe<String>;
  discountAmount?: Maybe<Float>;
  discountAmount_not?: Maybe<Float>;
  discountAmount_in?: Maybe<Float[] | Float>;
  discountAmount_not_in?: Maybe<Float[] | Float>;
  discountAmount_lt?: Maybe<Float>;
  discountAmount_lte?: Maybe<Float>;
  discountAmount_gt?: Maybe<Float>;
  discountAmount_gte?: Maybe<Float>;
  wholeSalePrice?: Maybe<Float>;
  wholeSalePrice_not?: Maybe<Float>;
  wholeSalePrice_in?: Maybe<Float[] | Float>;
  wholeSalePrice_not_in?: Maybe<Float[] | Float>;
  wholeSalePrice_lt?: Maybe<Float>;
  wholeSalePrice_lte?: Maybe<Float>;
  wholeSalePrice_gt?: Maybe<Float>;
  wholeSalePrice_gte?: Maybe<Float>;
  remarks?: Maybe<String>;
  remarks_not?: Maybe<String>;
  remarks_in?: Maybe<String[] | String>;
  remarks_not_in?: Maybe<String[] | String>;
  remarks_lt?: Maybe<String>;
  remarks_lte?: Maybe<String>;
  remarks_gt?: Maybe<String>;
  remarks_gte?: Maybe<String>;
  remarks_contains?: Maybe<String>;
  remarks_not_contains?: Maybe<String>;
  remarks_starts_with?: Maybe<String>;
  remarks_not_starts_with?: Maybe<String>;
  remarks_ends_with?: Maybe<String>;
  remarks_not_ends_with?: Maybe<String>;
  quantity?: Maybe<Int>;
  quantity_not?: Maybe<Int>;
  quantity_in?: Maybe<Int[] | Int>;
  quantity_not_in?: Maybe<Int[] | Int>;
  quantity_lt?: Maybe<Int>;
  quantity_lte?: Maybe<Int>;
  quantity_gt?: Maybe<Int>;
  quantity_gte?: Maybe<Int>;
  salesPlan?: Maybe<Int>;
  salesPlan_not?: Maybe<Int>;
  salesPlan_in?: Maybe<Int[] | Int>;
  salesPlan_not_in?: Maybe<Int[] | Int>;
  salesPlan_lt?: Maybe<Int>;
  salesPlan_lte?: Maybe<Int>;
  salesPlan_gt?: Maybe<Int>;
  salesPlan_gte?: Maybe<Int>;
  subPrice?: Maybe<Float>;
  subPrice_not?: Maybe<Float>;
  subPrice_in?: Maybe<Float[] | Float>;
  subPrice_not_in?: Maybe<Float[] | Float>;
  subPrice_lt?: Maybe<Float>;
  subPrice_lte?: Maybe<Float>;
  subPrice_gt?: Maybe<Float>;
  subPrice_gte?: Maybe<Float>;
  price?: Maybe<Float>;
  price_not?: Maybe<Float>;
  price_in?: Maybe<Float[] | Float>;
  price_not_in?: Maybe<Float[] | Float>;
  price_lt?: Maybe<Float>;
  price_lte?: Maybe<Float>;
  price_gt?: Maybe<Float>;
  price_gte?: Maybe<Float>;
  totalPrice?: Maybe<Float>;
  totalPrice_not?: Maybe<Float>;
  totalPrice_in?: Maybe<Float[] | Float>;
  totalPrice_not_in?: Maybe<Float[] | Float>;
  totalPrice_lt?: Maybe<Float>;
  totalPrice_lte?: Maybe<Float>;
  totalPrice_gt?: Maybe<Float>;
  totalPrice_gte?: Maybe<Float>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<
    SalesOrderItemScalarWhereInput[] | SalesOrderItemScalarWhereInput
  >;
  OR?: Maybe<SalesOrderItemScalarWhereInput[] | SalesOrderItemScalarWhereInput>;
  NOT?: Maybe<
    SalesOrderItemScalarWhereInput[] | SalesOrderItemScalarWhereInput
  >;
}

export interface SalesOrderUpdateManyMutationInput {
  code?: Maybe<String>;
  title?: Maybe<String>;
  remark?: Maybe<String>;
  discountAmount?: Maybe<Float>;
  couponDiscount?: Maybe<Float>;
  discount?: Maybe<Float>;
  subtotal?: Maybe<Float>;
  grandTotal?: Maybe<Float>;
  state?: Maybe<SalesOrderStatus>;
  userId?: Maybe<ID_Input>;
  shopId?: Maybe<ID_Input>;
  shippingDate?: Maybe<String>;
  actualDate?: Maybe<DateTimeInput>;
}

export interface SalesOrderItemUpsertWithWhereUniqueWithoutSalesOrderInput {
  where: SalesOrderItemWhereUniqueInput;
  update: SalesOrderItemUpdateWithoutSalesOrderDataInput;
  create: SalesOrderItemCreateWithoutSalesOrderInput;
}

export interface SalesOrderSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<SalesOrderWhereInput>;
  AND?: Maybe<
    SalesOrderSubscriptionWhereInput[] | SalesOrderSubscriptionWhereInput
  >;
  OR?: Maybe<
    SalesOrderSubscriptionWhereInput[] | SalesOrderSubscriptionWhereInput
  >;
  NOT?: Maybe<
    SalesOrderSubscriptionWhereInput[] | SalesOrderSubscriptionWhereInput
  >;
}

export interface SalesOrderUpsertWithoutProductsInput {
  update: SalesOrderUpdateWithoutProductsDataInput;
  create: SalesOrderCreateWithoutProductsInput;
}

export interface SalesOrderCreateInput {
  id?: Maybe<ID_Input>;
  code: String;
  title?: Maybe<String>;
  remark?: Maybe<String>;
  discountAmount?: Maybe<Float>;
  couponDiscount?: Maybe<Float>;
  discount?: Maybe<Float>;
  subtotal?: Maybe<Float>;
  grandTotal: Float;
  state: SalesOrderStatus;
  userId?: Maybe<ID_Input>;
  shopId: ID_Input;
  products?: Maybe<SalesOrderItemCreateManyWithoutSalesOrderInput>;
  shippingDate?: Maybe<String>;
  actualDate?: Maybe<DateTimeInput>;
}

export interface SalesOrderUpdateOneRequiredWithoutProductsInput {
  create?: Maybe<SalesOrderCreateWithoutProductsInput>;
  update?: Maybe<SalesOrderUpdateWithoutProductsDataInput>;
  upsert?: Maybe<SalesOrderUpsertWithoutProductsInput>;
  connect?: Maybe<SalesOrderWhereUniqueInput>;
}

export interface SalesOrderItemCreateManyWithoutSalesOrderInput {
  create?: Maybe<
    | SalesOrderItemCreateWithoutSalesOrderInput[]
    | SalesOrderItemCreateWithoutSalesOrderInput
  >;
  connect?: Maybe<
    SalesOrderItemWhereUniqueInput[] | SalesOrderItemWhereUniqueInput
  >;
}

export interface SalesOrderCreateWithoutProductsInput {
  id?: Maybe<ID_Input>;
  code: String;
  title?: Maybe<String>;
  remark?: Maybe<String>;
  discountAmount?: Maybe<Float>;
  couponDiscount?: Maybe<Float>;
  discount?: Maybe<Float>;
  subtotal?: Maybe<Float>;
  grandTotal: Float;
  state: SalesOrderStatus;
  userId?: Maybe<ID_Input>;
  shopId: ID_Input;
  shippingDate?: Maybe<String>;
  actualDate?: Maybe<DateTimeInput>;
}

export interface SalesOrderItemCreateWithoutSalesOrderInput {
  id?: Maybe<ID_Input>;
  productId: ID_Input;
  discount?: Maybe<String>;
  discountAmount?: Maybe<Float>;
  wholeSalePrice?: Maybe<Float>;
  remarks?: Maybe<String>;
  quantity: Int;
  salesPlan?: Maybe<Int>;
  subPrice?: Maybe<Float>;
  price: Float;
  totalPrice: Float;
}

export interface SalesOrderCreateOneWithoutProductsInput {
  create?: Maybe<SalesOrderCreateWithoutProductsInput>;
  connect?: Maybe<SalesOrderWhereUniqueInput>;
}

export interface SalesOrderItemUpdateManyDataInput {
  productId?: Maybe<ID_Input>;
  discount?: Maybe<String>;
  discountAmount?: Maybe<Float>;
  wholeSalePrice?: Maybe<Float>;
  remarks?: Maybe<String>;
  quantity?: Maybe<Int>;
  salesPlan?: Maybe<Int>;
  subPrice?: Maybe<Float>;
  price?: Maybe<Float>;
  totalPrice?: Maybe<Float>;
}

export interface SalesOrderItemUpdateManyMutationInput {
  productId?: Maybe<ID_Input>;
  discount?: Maybe<String>;
  discountAmount?: Maybe<Float>;
  wholeSalePrice?: Maybe<Float>;
  remarks?: Maybe<String>;
  quantity?: Maybe<Int>;
  salesPlan?: Maybe<Int>;
  subPrice?: Maybe<Float>;
  price?: Maybe<Float>;
  totalPrice?: Maybe<Float>;
}

export interface SalesOrderItemUpdateManyWithWhereNestedInput {
  where: SalesOrderItemScalarWhereInput;
  data: SalesOrderItemUpdateManyDataInput;
}

export interface SalesOrderWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  code?: Maybe<String>;
  code_not?: Maybe<String>;
  code_in?: Maybe<String[] | String>;
  code_not_in?: Maybe<String[] | String>;
  code_lt?: Maybe<String>;
  code_lte?: Maybe<String>;
  code_gt?: Maybe<String>;
  code_gte?: Maybe<String>;
  code_contains?: Maybe<String>;
  code_not_contains?: Maybe<String>;
  code_starts_with?: Maybe<String>;
  code_not_starts_with?: Maybe<String>;
  code_ends_with?: Maybe<String>;
  code_not_ends_with?: Maybe<String>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  remark?: Maybe<String>;
  remark_not?: Maybe<String>;
  remark_in?: Maybe<String[] | String>;
  remark_not_in?: Maybe<String[] | String>;
  remark_lt?: Maybe<String>;
  remark_lte?: Maybe<String>;
  remark_gt?: Maybe<String>;
  remark_gte?: Maybe<String>;
  remark_contains?: Maybe<String>;
  remark_not_contains?: Maybe<String>;
  remark_starts_with?: Maybe<String>;
  remark_not_starts_with?: Maybe<String>;
  remark_ends_with?: Maybe<String>;
  remark_not_ends_with?: Maybe<String>;
  discountAmount?: Maybe<Float>;
  discountAmount_not?: Maybe<Float>;
  discountAmount_in?: Maybe<Float[] | Float>;
  discountAmount_not_in?: Maybe<Float[] | Float>;
  discountAmount_lt?: Maybe<Float>;
  discountAmount_lte?: Maybe<Float>;
  discountAmount_gt?: Maybe<Float>;
  discountAmount_gte?: Maybe<Float>;
  couponDiscount?: Maybe<Float>;
  couponDiscount_not?: Maybe<Float>;
  couponDiscount_in?: Maybe<Float[] | Float>;
  couponDiscount_not_in?: Maybe<Float[] | Float>;
  couponDiscount_lt?: Maybe<Float>;
  couponDiscount_lte?: Maybe<Float>;
  couponDiscount_gt?: Maybe<Float>;
  couponDiscount_gte?: Maybe<Float>;
  discount?: Maybe<Float>;
  discount_not?: Maybe<Float>;
  discount_in?: Maybe<Float[] | Float>;
  discount_not_in?: Maybe<Float[] | Float>;
  discount_lt?: Maybe<Float>;
  discount_lte?: Maybe<Float>;
  discount_gt?: Maybe<Float>;
  discount_gte?: Maybe<Float>;
  subtotal?: Maybe<Float>;
  subtotal_not?: Maybe<Float>;
  subtotal_in?: Maybe<Float[] | Float>;
  subtotal_not_in?: Maybe<Float[] | Float>;
  subtotal_lt?: Maybe<Float>;
  subtotal_lte?: Maybe<Float>;
  subtotal_gt?: Maybe<Float>;
  subtotal_gte?: Maybe<Float>;
  grandTotal?: Maybe<Float>;
  grandTotal_not?: Maybe<Float>;
  grandTotal_in?: Maybe<Float[] | Float>;
  grandTotal_not_in?: Maybe<Float[] | Float>;
  grandTotal_lt?: Maybe<Float>;
  grandTotal_lte?: Maybe<Float>;
  grandTotal_gt?: Maybe<Float>;
  grandTotal_gte?: Maybe<Float>;
  state?: Maybe<SalesOrderStatus>;
  state_not?: Maybe<SalesOrderStatus>;
  state_in?: Maybe<SalesOrderStatus[] | SalesOrderStatus>;
  state_not_in?: Maybe<SalesOrderStatus[] | SalesOrderStatus>;
  userId?: Maybe<ID_Input>;
  userId_not?: Maybe<ID_Input>;
  userId_in?: Maybe<ID_Input[] | ID_Input>;
  userId_not_in?: Maybe<ID_Input[] | ID_Input>;
  userId_lt?: Maybe<ID_Input>;
  userId_lte?: Maybe<ID_Input>;
  userId_gt?: Maybe<ID_Input>;
  userId_gte?: Maybe<ID_Input>;
  userId_contains?: Maybe<ID_Input>;
  userId_not_contains?: Maybe<ID_Input>;
  userId_starts_with?: Maybe<ID_Input>;
  userId_not_starts_with?: Maybe<ID_Input>;
  userId_ends_with?: Maybe<ID_Input>;
  userId_not_ends_with?: Maybe<ID_Input>;
  shopId?: Maybe<ID_Input>;
  shopId_not?: Maybe<ID_Input>;
  shopId_in?: Maybe<ID_Input[] | ID_Input>;
  shopId_not_in?: Maybe<ID_Input[] | ID_Input>;
  shopId_lt?: Maybe<ID_Input>;
  shopId_lte?: Maybe<ID_Input>;
  shopId_gt?: Maybe<ID_Input>;
  shopId_gte?: Maybe<ID_Input>;
  shopId_contains?: Maybe<ID_Input>;
  shopId_not_contains?: Maybe<ID_Input>;
  shopId_starts_with?: Maybe<ID_Input>;
  shopId_not_starts_with?: Maybe<ID_Input>;
  shopId_ends_with?: Maybe<ID_Input>;
  shopId_not_ends_with?: Maybe<ID_Input>;
  products_every?: Maybe<SalesOrderItemWhereInput>;
  products_some?: Maybe<SalesOrderItemWhereInput>;
  products_none?: Maybe<SalesOrderItemWhereInput>;
  shippingDate?: Maybe<String>;
  shippingDate_not?: Maybe<String>;
  shippingDate_in?: Maybe<String[] | String>;
  shippingDate_not_in?: Maybe<String[] | String>;
  shippingDate_lt?: Maybe<String>;
  shippingDate_lte?: Maybe<String>;
  shippingDate_gt?: Maybe<String>;
  shippingDate_gte?: Maybe<String>;
  shippingDate_contains?: Maybe<String>;
  shippingDate_not_contains?: Maybe<String>;
  shippingDate_starts_with?: Maybe<String>;
  shippingDate_not_starts_with?: Maybe<String>;
  shippingDate_ends_with?: Maybe<String>;
  shippingDate_not_ends_with?: Maybe<String>;
  actualDate?: Maybe<DateTimeInput>;
  actualDate_not?: Maybe<DateTimeInput>;
  actualDate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  actualDate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  actualDate_lt?: Maybe<DateTimeInput>;
  actualDate_lte?: Maybe<DateTimeInput>;
  actualDate_gt?: Maybe<DateTimeInput>;
  actualDate_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<SalesOrderWhereInput[] | SalesOrderWhereInput>;
  OR?: Maybe<SalesOrderWhereInput[] | SalesOrderWhereInput>;
  NOT?: Maybe<SalesOrderWhereInput[] | SalesOrderWhereInput>;
}

export interface SalesOrderItemUpdateWithWhereUniqueWithoutSalesOrderInput {
  where: SalesOrderItemWhereUniqueInput;
  data: SalesOrderItemUpdateWithoutSalesOrderDataInput;
}

export interface SalesOrderItemUpdateManyWithoutSalesOrderInput {
  create?: Maybe<
    | SalesOrderItemCreateWithoutSalesOrderInput[]
    | SalesOrderItemCreateWithoutSalesOrderInput
  >;
  delete?: Maybe<
    SalesOrderItemWhereUniqueInput[] | SalesOrderItemWhereUniqueInput
  >;
  connect?: Maybe<
    SalesOrderItemWhereUniqueInput[] | SalesOrderItemWhereUniqueInput
  >;
  set?: Maybe<
    SalesOrderItemWhereUniqueInput[] | SalesOrderItemWhereUniqueInput
  >;
  disconnect?: Maybe<
    SalesOrderItemWhereUniqueInput[] | SalesOrderItemWhereUniqueInput
  >;
  update?: Maybe<
    | SalesOrderItemUpdateWithWhereUniqueWithoutSalesOrderInput[]
    | SalesOrderItemUpdateWithWhereUniqueWithoutSalesOrderInput
  >;
  upsert?: Maybe<
    | SalesOrderItemUpsertWithWhereUniqueWithoutSalesOrderInput[]
    | SalesOrderItemUpsertWithWhereUniqueWithoutSalesOrderInput
  >;
  deleteMany?: Maybe<
    SalesOrderItemScalarWhereInput[] | SalesOrderItemScalarWhereInput
  >;
  updateMany?: Maybe<
    | SalesOrderItemUpdateManyWithWhereNestedInput[]
    | SalesOrderItemUpdateManyWithWhereNestedInput
  >;
}

export interface SalesOrderUpdateWithoutProductsDataInput {
  code?: Maybe<String>;
  title?: Maybe<String>;
  remark?: Maybe<String>;
  discountAmount?: Maybe<Float>;
  couponDiscount?: Maybe<Float>;
  discount?: Maybe<Float>;
  subtotal?: Maybe<Float>;
  grandTotal?: Maybe<Float>;
  state?: Maybe<SalesOrderStatus>;
  userId?: Maybe<ID_Input>;
  shopId?: Maybe<ID_Input>;
  shippingDate?: Maybe<String>;
  actualDate?: Maybe<DateTimeInput>;
}

export interface SalesOrderItemSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<SalesOrderItemWhereInput>;
  AND?: Maybe<
    | SalesOrderItemSubscriptionWhereInput[]
    | SalesOrderItemSubscriptionWhereInput
  >;
  OR?: Maybe<
    | SalesOrderItemSubscriptionWhereInput[]
    | SalesOrderItemSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | SalesOrderItemSubscriptionWhereInput[]
    | SalesOrderItemSubscriptionWhereInput
  >;
}

export type SalesOrderItemWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface SalesOrderItemUpdateInput {
  salesOrder?: Maybe<SalesOrderUpdateOneRequiredWithoutProductsInput>;
  productId?: Maybe<ID_Input>;
  discount?: Maybe<String>;
  discountAmount?: Maybe<Float>;
  wholeSalePrice?: Maybe<Float>;
  remarks?: Maybe<String>;
  quantity?: Maybe<Int>;
  salesPlan?: Maybe<Int>;
  subPrice?: Maybe<Float>;
  price?: Maybe<Float>;
  totalPrice?: Maybe<Float>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface SalesOrderItemPreviousValues {
  id: ID_Output;
  productId: ID_Output;
  discount?: String;
  discountAmount?: Float;
  wholeSalePrice?: Float;
  remarks?: String;
  quantity: Int;
  salesPlan?: Int;
  subPrice?: Float;
  price: Float;
  totalPrice: Float;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface SalesOrderItemPreviousValuesPromise
  extends Promise<SalesOrderItemPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  productId: () => Promise<ID_Output>;
  discount: () => Promise<String>;
  discountAmount: () => Promise<Float>;
  wholeSalePrice: () => Promise<Float>;
  remarks: () => Promise<String>;
  quantity: () => Promise<Int>;
  salesPlan: () => Promise<Int>;
  subPrice: () => Promise<Float>;
  price: () => Promise<Float>;
  totalPrice: () => Promise<Float>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface SalesOrderItemPreviousValuesSubscription
  extends Promise<AsyncIterator<SalesOrderItemPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  productId: () => Promise<AsyncIterator<ID_Output>>;
  discount: () => Promise<AsyncIterator<String>>;
  discountAmount: () => Promise<AsyncIterator<Float>>;
  wholeSalePrice: () => Promise<AsyncIterator<Float>>;
  remarks: () => Promise<AsyncIterator<String>>;
  quantity: () => Promise<AsyncIterator<Int>>;
  salesPlan: () => Promise<AsyncIterator<Int>>;
  subPrice: () => Promise<AsyncIterator<Float>>;
  price: () => Promise<AsyncIterator<Float>>;
  totalPrice: () => Promise<AsyncIterator<Float>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface AggregateSalesOrder {
  count: Int;
}

export interface AggregateSalesOrderPromise
  extends Promise<AggregateSalesOrder>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSalesOrderSubscription
  extends Promise<AsyncIterator<AggregateSalesOrder>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface SalesOrderItem {
  id: ID_Output;
  productId: ID_Output;
  discount?: String;
  discountAmount?: Float;
  wholeSalePrice?: Float;
  remarks?: String;
  quantity: Int;
  salesPlan?: Int;
  subPrice?: Float;
  price: Float;
  totalPrice: Float;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface SalesOrderItemPromise
  extends Promise<SalesOrderItem>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  salesOrder: <T = SalesOrderPromise>() => T;
  productId: () => Promise<ID_Output>;
  discount: () => Promise<String>;
  discountAmount: () => Promise<Float>;
  wholeSalePrice: () => Promise<Float>;
  remarks: () => Promise<String>;
  quantity: () => Promise<Int>;
  salesPlan: () => Promise<Int>;
  subPrice: () => Promise<Float>;
  price: () => Promise<Float>;
  totalPrice: () => Promise<Float>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface SalesOrderItemSubscription
  extends Promise<AsyncIterator<SalesOrderItem>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  salesOrder: <T = SalesOrderSubscription>() => T;
  productId: () => Promise<AsyncIterator<ID_Output>>;
  discount: () => Promise<AsyncIterator<String>>;
  discountAmount: () => Promise<AsyncIterator<Float>>;
  wholeSalePrice: () => Promise<AsyncIterator<Float>>;
  remarks: () => Promise<AsyncIterator<String>>;
  quantity: () => Promise<AsyncIterator<Int>>;
  salesPlan: () => Promise<AsyncIterator<Int>>;
  subPrice: () => Promise<AsyncIterator<Float>>;
  price: () => Promise<AsyncIterator<Float>>;
  totalPrice: () => Promise<AsyncIterator<Float>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface SalesOrderItemNullablePromise
  extends Promise<SalesOrderItem | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  salesOrder: <T = SalesOrderPromise>() => T;
  productId: () => Promise<ID_Output>;
  discount: () => Promise<String>;
  discountAmount: () => Promise<Float>;
  wholeSalePrice: () => Promise<Float>;
  remarks: () => Promise<String>;
  quantity: () => Promise<Int>;
  salesPlan: () => Promise<Int>;
  subPrice: () => Promise<Float>;
  price: () => Promise<Float>;
  totalPrice: () => Promise<Float>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface SalesOrderEdge {
  node: SalesOrder;
  cursor: String;
}

export interface SalesOrderEdgePromise
  extends Promise<SalesOrderEdge>,
    Fragmentable {
  node: <T = SalesOrderPromise>() => T;
  cursor: () => Promise<String>;
}

export interface SalesOrderEdgeSubscription
  extends Promise<AsyncIterator<SalesOrderEdge>>,
    Fragmentable {
  node: <T = SalesOrderSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface SalesOrder {
  id: ID_Output;
  code: String;
  title?: String;
  remark?: String;
  discountAmount?: Float;
  couponDiscount?: Float;
  discount?: Float;
  subtotal?: Float;
  grandTotal: Float;
  state: SalesOrderStatus;
  userId?: ID_Output;
  shopId: ID_Output;
  shippingDate?: String;
  actualDate?: DateTimeOutput;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface SalesOrderPromise extends Promise<SalesOrder>, Fragmentable {
  id: () => Promise<ID_Output>;
  code: () => Promise<String>;
  title: () => Promise<String>;
  remark: () => Promise<String>;
  discountAmount: () => Promise<Float>;
  couponDiscount: () => Promise<Float>;
  discount: () => Promise<Float>;
  subtotal: () => Promise<Float>;
  grandTotal: () => Promise<Float>;
  state: () => Promise<SalesOrderStatus>;
  userId: () => Promise<ID_Output>;
  shopId: () => Promise<ID_Output>;
  products: <T = FragmentableArray<SalesOrderItem>>(args?: {
    where?: SalesOrderItemWhereInput;
    orderBy?: SalesOrderItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  shippingDate: () => Promise<String>;
  actualDate: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface SalesOrderSubscription
  extends Promise<AsyncIterator<SalesOrder>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  code: () => Promise<AsyncIterator<String>>;
  title: () => Promise<AsyncIterator<String>>;
  remark: () => Promise<AsyncIterator<String>>;
  discountAmount: () => Promise<AsyncIterator<Float>>;
  couponDiscount: () => Promise<AsyncIterator<Float>>;
  discount: () => Promise<AsyncIterator<Float>>;
  subtotal: () => Promise<AsyncIterator<Float>>;
  grandTotal: () => Promise<AsyncIterator<Float>>;
  state: () => Promise<AsyncIterator<SalesOrderStatus>>;
  userId: () => Promise<AsyncIterator<ID_Output>>;
  shopId: () => Promise<AsyncIterator<ID_Output>>;
  products: <T = Promise<AsyncIterator<SalesOrderItemSubscription>>>(args?: {
    where?: SalesOrderItemWhereInput;
    orderBy?: SalesOrderItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  shippingDate: () => Promise<AsyncIterator<String>>;
  actualDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface SalesOrderNullablePromise
  extends Promise<SalesOrder | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  code: () => Promise<String>;
  title: () => Promise<String>;
  remark: () => Promise<String>;
  discountAmount: () => Promise<Float>;
  couponDiscount: () => Promise<Float>;
  discount: () => Promise<Float>;
  subtotal: () => Promise<Float>;
  grandTotal: () => Promise<Float>;
  state: () => Promise<SalesOrderStatus>;
  userId: () => Promise<ID_Output>;
  shopId: () => Promise<ID_Output>;
  products: <T = FragmentableArray<SalesOrderItem>>(args?: {
    where?: SalesOrderItemWhereInput;
    orderBy?: SalesOrderItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  shippingDate: () => Promise<String>;
  actualDate: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface SalesOrderConnection {
  pageInfo: PageInfo;
  edges: SalesOrderEdge[];
}

export interface SalesOrderConnectionPromise
  extends Promise<SalesOrderConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SalesOrderEdge>>() => T;
  aggregate: <T = AggregateSalesOrderPromise>() => T;
}

export interface SalesOrderConnectionSubscription
  extends Promise<AsyncIterator<SalesOrderConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SalesOrderEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSalesOrderSubscription>() => T;
}

export interface SalesOrderSubscriptionPayload {
  mutation: MutationType;
  node: SalesOrder;
  updatedFields: String[];
  previousValues: SalesOrderPreviousValues;
}

export interface SalesOrderSubscriptionPayloadPromise
  extends Promise<SalesOrderSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SalesOrderPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SalesOrderPreviousValuesPromise>() => T;
}

export interface SalesOrderSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SalesOrderSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SalesOrderSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SalesOrderPreviousValuesSubscription>() => T;
}

export interface SalesOrderPreviousValues {
  id: ID_Output;
  code: String;
  title?: String;
  remark?: String;
  discountAmount?: Float;
  couponDiscount?: Float;
  discount?: Float;
  subtotal?: Float;
  grandTotal: Float;
  state: SalesOrderStatus;
  userId?: ID_Output;
  shopId: ID_Output;
  shippingDate?: String;
  actualDate?: DateTimeOutput;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface SalesOrderPreviousValuesPromise
  extends Promise<SalesOrderPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  code: () => Promise<String>;
  title: () => Promise<String>;
  remark: () => Promise<String>;
  discountAmount: () => Promise<Float>;
  couponDiscount: () => Promise<Float>;
  discount: () => Promise<Float>;
  subtotal: () => Promise<Float>;
  grandTotal: () => Promise<Float>;
  state: () => Promise<SalesOrderStatus>;
  userId: () => Promise<ID_Output>;
  shopId: () => Promise<ID_Output>;
  shippingDate: () => Promise<String>;
  actualDate: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface SalesOrderPreviousValuesSubscription
  extends Promise<AsyncIterator<SalesOrderPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  code: () => Promise<AsyncIterator<String>>;
  title: () => Promise<AsyncIterator<String>>;
  remark: () => Promise<AsyncIterator<String>>;
  discountAmount: () => Promise<AsyncIterator<Float>>;
  couponDiscount: () => Promise<AsyncIterator<Float>>;
  discount: () => Promise<AsyncIterator<Float>>;
  subtotal: () => Promise<AsyncIterator<Float>>;
  grandTotal: () => Promise<AsyncIterator<Float>>;
  state: () => Promise<AsyncIterator<SalesOrderStatus>>;
  userId: () => Promise<AsyncIterator<ID_Output>>;
  shopId: () => Promise<AsyncIterator<ID_Output>>;
  shippingDate: () => Promise<AsyncIterator<String>>;
  actualDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface SalesOrderItemSubscriptionPayload {
  mutation: MutationType;
  node: SalesOrderItem;
  updatedFields: String[];
  previousValues: SalesOrderItemPreviousValues;
}

export interface SalesOrderItemSubscriptionPayloadPromise
  extends Promise<SalesOrderItemSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SalesOrderItemPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SalesOrderItemPreviousValuesPromise>() => T;
}

export interface SalesOrderItemSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SalesOrderItemSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SalesOrderItemSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SalesOrderItemPreviousValuesSubscription>() => T;
}

export interface AggregateSalesOrderItem {
  count: Int;
}

export interface AggregateSalesOrderItemPromise
  extends Promise<AggregateSalesOrderItem>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSalesOrderItemSubscription
  extends Promise<AsyncIterator<AggregateSalesOrderItem>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface SalesOrderItemConnection {
  pageInfo: PageInfo;
  edges: SalesOrderItemEdge[];
}

export interface SalesOrderItemConnectionPromise
  extends Promise<SalesOrderItemConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SalesOrderItemEdge>>() => T;
  aggregate: <T = AggregateSalesOrderItemPromise>() => T;
}

export interface SalesOrderItemConnectionSubscription
  extends Promise<AsyncIterator<SalesOrderItemConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SalesOrderItemEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSalesOrderItemSubscription>() => T;
}

export interface SalesOrderItemEdge {
  node: SalesOrderItem;
  cursor: String;
}

export interface SalesOrderItemEdgePromise
  extends Promise<SalesOrderItemEdge>,
    Fragmentable {
  node: <T = SalesOrderItemPromise>() => T;
  cursor: () => Promise<String>;
}

export interface SalesOrderItemEdgeSubscription
  extends Promise<AsyncIterator<SalesOrderItemEdge>>,
    Fragmentable {
  node: <T = SalesOrderItemSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

export type Long = string;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).
*/
export type Float = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "SalesOrder",
    embedded: false
  },
  {
    name: "SalesOrderItem",
    embedded: false
  },
  {
    name: "SalesOrderStatus",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
