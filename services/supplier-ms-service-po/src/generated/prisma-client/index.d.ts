// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  purchaseOrder: (where?: PurchaseOrderWhereInput) => Promise<boolean>;
  purchaseOrderItem: (where?: PurchaseOrderItemWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  purchaseOrder: (
    where: PurchaseOrderWhereUniqueInput
  ) => PurchaseOrderNullablePromise;
  purchaseOrders: (args?: {
    where?: PurchaseOrderWhereInput;
    orderBy?: PurchaseOrderOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<PurchaseOrder>;
  purchaseOrdersConnection: (args?: {
    where?: PurchaseOrderWhereInput;
    orderBy?: PurchaseOrderOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PurchaseOrderConnectionPromise;
  purchaseOrderItem: (
    where: PurchaseOrderItemWhereUniqueInput
  ) => PurchaseOrderItemNullablePromise;
  purchaseOrderItems: (args?: {
    where?: PurchaseOrderItemWhereInput;
    orderBy?: PurchaseOrderItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<PurchaseOrderItem>;
  purchaseOrderItemsConnection: (args?: {
    where?: PurchaseOrderItemWhereInput;
    orderBy?: PurchaseOrderItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PurchaseOrderItemConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createPurchaseOrder: (data: PurchaseOrderCreateInput) => PurchaseOrderPromise;
  updatePurchaseOrder: (args: {
    data: PurchaseOrderUpdateInput;
    where: PurchaseOrderWhereUniqueInput;
  }) => PurchaseOrderPromise;
  updateManyPurchaseOrders: (args: {
    data: PurchaseOrderUpdateManyMutationInput;
    where?: PurchaseOrderWhereInput;
  }) => BatchPayloadPromise;
  upsertPurchaseOrder: (args: {
    where: PurchaseOrderWhereUniqueInput;
    create: PurchaseOrderCreateInput;
    update: PurchaseOrderUpdateInput;
  }) => PurchaseOrderPromise;
  deletePurchaseOrder: (
    where: PurchaseOrderWhereUniqueInput
  ) => PurchaseOrderPromise;
  deleteManyPurchaseOrders: (
    where?: PurchaseOrderWhereInput
  ) => BatchPayloadPromise;
  createPurchaseOrderItem: (
    data: PurchaseOrderItemCreateInput
  ) => PurchaseOrderItemPromise;
  updatePurchaseOrderItem: (args: {
    data: PurchaseOrderItemUpdateInput;
    where: PurchaseOrderItemWhereUniqueInput;
  }) => PurchaseOrderItemPromise;
  updateManyPurchaseOrderItems: (args: {
    data: PurchaseOrderItemUpdateManyMutationInput;
    where?: PurchaseOrderItemWhereInput;
  }) => BatchPayloadPromise;
  upsertPurchaseOrderItem: (args: {
    where: PurchaseOrderItemWhereUniqueInput;
    create: PurchaseOrderItemCreateInput;
    update: PurchaseOrderItemUpdateInput;
  }) => PurchaseOrderItemPromise;
  deletePurchaseOrderItem: (
    where: PurchaseOrderItemWhereUniqueInput
  ) => PurchaseOrderItemPromise;
  deleteManyPurchaseOrderItems: (
    where?: PurchaseOrderItemWhereInput
  ) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  purchaseOrder: (
    where?: PurchaseOrderSubscriptionWhereInput
  ) => PurchaseOrderSubscriptionPayloadSubscription;
  purchaseOrderItem: (
    where?: PurchaseOrderItemSubscriptionWhereInput
  ) => PurchaseOrderItemSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type PurchaseOrderStatus =
  | "DRAFT"
  | "PENDING"
  | "APPROVED"
  | "SENT"
  | "ACKED"
  | "CONFIRMED"
  | "SHIPPED"
  | "ARRIVED"
  | "RECEIVED"
  | "DELETED";

export type PurchaseOrderItemOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "productId_ASC"
  | "productId_DESC"
  | "remarks_ASC"
  | "remarks_DESC"
  | "quantity_ASC"
  | "quantity_DESC"
  | "price_ASC"
  | "price_DESC"
  | "totalPrice_ASC"
  | "totalPrice_DESC"
  | "deliveryDate_ASC"
  | "deliveryDate_DESC"
  | "expiryDate_ASC"
  | "expiryDate_DESC"
  | "tax_ASC"
  | "tax_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type PurchaseOrderOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "code_ASC"
  | "code_DESC"
  | "supplierId_ASC"
  | "supplierId_DESC"
  | "userId_ASC"
  | "userId_DESC"
  | "expectedDeliveryAt_ASC"
  | "expectedDeliveryAt_DESC"
  | "unfinishedTax_ASC"
  | "unfinishedTax_DESC"
  | "totalPrice_ASC"
  | "totalPrice_DESC"
  | "state_ASC"
  | "state_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface PurchaseOrderUpdateInput {
  code?: Maybe<String>;
  supplierId?: Maybe<ID_Input>;
  userId?: Maybe<ID_Input>;
  expectedDeliveryAt?: Maybe<DateTimeInput>;
  unfinishedTax?: Maybe<Float>;
  totalPrice?: Maybe<Float>;
  state?: Maybe<PurchaseOrderStatus>;
  products?: Maybe<PurchaseOrderItemUpdateManyWithoutPurchaseOrderInput>;
}

export type PurchaseOrderWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  code?: Maybe<String>;
}>;

export interface PurchaseOrderItemCreateInput {
  id?: Maybe<ID_Input>;
  purchaseOrder: PurchaseOrderCreateOneWithoutProductsInput;
  productId: ID_Input;
  remarks?: Maybe<String>;
  quantity?: Maybe<Int>;
  price?: Maybe<Float>;
  totalPrice?: Maybe<Float>;
  deliveryDate?: Maybe<DateTimeInput>;
  expiryDate?: Maybe<DateTimeInput>;
  tax?: Maybe<Float>;
}

export interface PurchaseOrderItemScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  productId?: Maybe<ID_Input>;
  productId_not?: Maybe<ID_Input>;
  productId_in?: Maybe<ID_Input[] | ID_Input>;
  productId_not_in?: Maybe<ID_Input[] | ID_Input>;
  productId_lt?: Maybe<ID_Input>;
  productId_lte?: Maybe<ID_Input>;
  productId_gt?: Maybe<ID_Input>;
  productId_gte?: Maybe<ID_Input>;
  productId_contains?: Maybe<ID_Input>;
  productId_not_contains?: Maybe<ID_Input>;
  productId_starts_with?: Maybe<ID_Input>;
  productId_not_starts_with?: Maybe<ID_Input>;
  productId_ends_with?: Maybe<ID_Input>;
  productId_not_ends_with?: Maybe<ID_Input>;
  remarks?: Maybe<String>;
  remarks_not?: Maybe<String>;
  remarks_in?: Maybe<String[] | String>;
  remarks_not_in?: Maybe<String[] | String>;
  remarks_lt?: Maybe<String>;
  remarks_lte?: Maybe<String>;
  remarks_gt?: Maybe<String>;
  remarks_gte?: Maybe<String>;
  remarks_contains?: Maybe<String>;
  remarks_not_contains?: Maybe<String>;
  remarks_starts_with?: Maybe<String>;
  remarks_not_starts_with?: Maybe<String>;
  remarks_ends_with?: Maybe<String>;
  remarks_not_ends_with?: Maybe<String>;
  quantity?: Maybe<Int>;
  quantity_not?: Maybe<Int>;
  quantity_in?: Maybe<Int[] | Int>;
  quantity_not_in?: Maybe<Int[] | Int>;
  quantity_lt?: Maybe<Int>;
  quantity_lte?: Maybe<Int>;
  quantity_gt?: Maybe<Int>;
  quantity_gte?: Maybe<Int>;
  price?: Maybe<Float>;
  price_not?: Maybe<Float>;
  price_in?: Maybe<Float[] | Float>;
  price_not_in?: Maybe<Float[] | Float>;
  price_lt?: Maybe<Float>;
  price_lte?: Maybe<Float>;
  price_gt?: Maybe<Float>;
  price_gte?: Maybe<Float>;
  totalPrice?: Maybe<Float>;
  totalPrice_not?: Maybe<Float>;
  totalPrice_in?: Maybe<Float[] | Float>;
  totalPrice_not_in?: Maybe<Float[] | Float>;
  totalPrice_lt?: Maybe<Float>;
  totalPrice_lte?: Maybe<Float>;
  totalPrice_gt?: Maybe<Float>;
  totalPrice_gte?: Maybe<Float>;
  deliveryDate?: Maybe<DateTimeInput>;
  deliveryDate_not?: Maybe<DateTimeInput>;
  deliveryDate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  deliveryDate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  deliveryDate_lt?: Maybe<DateTimeInput>;
  deliveryDate_lte?: Maybe<DateTimeInput>;
  deliveryDate_gt?: Maybe<DateTimeInput>;
  deliveryDate_gte?: Maybe<DateTimeInput>;
  expiryDate?: Maybe<DateTimeInput>;
  expiryDate_not?: Maybe<DateTimeInput>;
  expiryDate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  expiryDate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  expiryDate_lt?: Maybe<DateTimeInput>;
  expiryDate_lte?: Maybe<DateTimeInput>;
  expiryDate_gt?: Maybe<DateTimeInput>;
  expiryDate_gte?: Maybe<DateTimeInput>;
  tax?: Maybe<Float>;
  tax_not?: Maybe<Float>;
  tax_in?: Maybe<Float[] | Float>;
  tax_not_in?: Maybe<Float[] | Float>;
  tax_lt?: Maybe<Float>;
  tax_lte?: Maybe<Float>;
  tax_gt?: Maybe<Float>;
  tax_gte?: Maybe<Float>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<
    PurchaseOrderItemScalarWhereInput[] | PurchaseOrderItemScalarWhereInput
  >;
  OR?: Maybe<
    PurchaseOrderItemScalarWhereInput[] | PurchaseOrderItemScalarWhereInput
  >;
  NOT?: Maybe<
    PurchaseOrderItemScalarWhereInput[] | PurchaseOrderItemScalarWhereInput
  >;
}

export interface PurchaseOrderUpdateManyMutationInput {
  code?: Maybe<String>;
  supplierId?: Maybe<ID_Input>;
  userId?: Maybe<ID_Input>;
  expectedDeliveryAt?: Maybe<DateTimeInput>;
  unfinishedTax?: Maybe<Float>;
  totalPrice?: Maybe<Float>;
  state?: Maybe<PurchaseOrderStatus>;
}

export interface PurchaseOrderItemUpdateWithoutPurchaseOrderDataInput {
  productId?: Maybe<ID_Input>;
  remarks?: Maybe<String>;
  quantity?: Maybe<Int>;
  price?: Maybe<Float>;
  totalPrice?: Maybe<Float>;
  deliveryDate?: Maybe<DateTimeInput>;
  expiryDate?: Maybe<DateTimeInput>;
  tax?: Maybe<Float>;
}

export interface PurchaseOrderItemUpdateManyDataInput {
  productId?: Maybe<ID_Input>;
  remarks?: Maybe<String>;
  quantity?: Maybe<Int>;
  price?: Maybe<Float>;
  totalPrice?: Maybe<Float>;
  deliveryDate?: Maybe<DateTimeInput>;
  expiryDate?: Maybe<DateTimeInput>;
  tax?: Maybe<Float>;
}

export interface PurchaseOrderItemSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<PurchaseOrderItemWhereInput>;
  AND?: Maybe<
    | PurchaseOrderItemSubscriptionWhereInput[]
    | PurchaseOrderItemSubscriptionWhereInput
  >;
  OR?: Maybe<
    | PurchaseOrderItemSubscriptionWhereInput[]
    | PurchaseOrderItemSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | PurchaseOrderItemSubscriptionWhereInput[]
    | PurchaseOrderItemSubscriptionWhereInput
  >;
}

export interface PurchaseOrderItemUpdateManyMutationInput {
  productId?: Maybe<ID_Input>;
  remarks?: Maybe<String>;
  quantity?: Maybe<Int>;
  price?: Maybe<Float>;
  totalPrice?: Maybe<Float>;
  deliveryDate?: Maybe<DateTimeInput>;
  expiryDate?: Maybe<DateTimeInput>;
  tax?: Maybe<Float>;
}

export interface PurchaseOrderUpdateWithoutProductsDataInput {
  code?: Maybe<String>;
  supplierId?: Maybe<ID_Input>;
  userId?: Maybe<ID_Input>;
  expectedDeliveryAt?: Maybe<DateTimeInput>;
  unfinishedTax?: Maybe<Float>;
  totalPrice?: Maybe<Float>;
  state?: Maybe<PurchaseOrderStatus>;
}

export interface PurchaseOrderCreateInput {
  id?: Maybe<ID_Input>;
  code: String;
  supplierId: ID_Input;
  userId?: Maybe<ID_Input>;
  expectedDeliveryAt?: Maybe<DateTimeInput>;
  unfinishedTax?: Maybe<Float>;
  totalPrice?: Maybe<Float>;
  state: PurchaseOrderStatus;
  products?: Maybe<PurchaseOrderItemCreateManyWithoutPurchaseOrderInput>;
}

export interface PurchaseOrderItemUpdateInput {
  purchaseOrder?: Maybe<PurchaseOrderUpdateOneRequiredWithoutProductsInput>;
  productId?: Maybe<ID_Input>;
  remarks?: Maybe<String>;
  quantity?: Maybe<Int>;
  price?: Maybe<Float>;
  totalPrice?: Maybe<Float>;
  deliveryDate?: Maybe<DateTimeInput>;
  expiryDate?: Maybe<DateTimeInput>;
  tax?: Maybe<Float>;
}

export interface PurchaseOrderItemCreateManyWithoutPurchaseOrderInput {
  create?: Maybe<
    | PurchaseOrderItemCreateWithoutPurchaseOrderInput[]
    | PurchaseOrderItemCreateWithoutPurchaseOrderInput
  >;
  connect?: Maybe<
    PurchaseOrderItemWhereUniqueInput[] | PurchaseOrderItemWhereUniqueInput
  >;
}

export interface PurchaseOrderCreateOneWithoutProductsInput {
  create?: Maybe<PurchaseOrderCreateWithoutProductsInput>;
  connect?: Maybe<PurchaseOrderWhereUniqueInput>;
}

export interface PurchaseOrderItemCreateWithoutPurchaseOrderInput {
  id?: Maybe<ID_Input>;
  productId: ID_Input;
  remarks?: Maybe<String>;
  quantity?: Maybe<Int>;
  price?: Maybe<Float>;
  totalPrice?: Maybe<Float>;
  deliveryDate?: Maybe<DateTimeInput>;
  expiryDate?: Maybe<DateTimeInput>;
  tax?: Maybe<Float>;
}

export interface PurchaseOrderWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  code?: Maybe<String>;
  code_not?: Maybe<String>;
  code_in?: Maybe<String[] | String>;
  code_not_in?: Maybe<String[] | String>;
  code_lt?: Maybe<String>;
  code_lte?: Maybe<String>;
  code_gt?: Maybe<String>;
  code_gte?: Maybe<String>;
  code_contains?: Maybe<String>;
  code_not_contains?: Maybe<String>;
  code_starts_with?: Maybe<String>;
  code_not_starts_with?: Maybe<String>;
  code_ends_with?: Maybe<String>;
  code_not_ends_with?: Maybe<String>;
  supplierId?: Maybe<ID_Input>;
  supplierId_not?: Maybe<ID_Input>;
  supplierId_in?: Maybe<ID_Input[] | ID_Input>;
  supplierId_not_in?: Maybe<ID_Input[] | ID_Input>;
  supplierId_lt?: Maybe<ID_Input>;
  supplierId_lte?: Maybe<ID_Input>;
  supplierId_gt?: Maybe<ID_Input>;
  supplierId_gte?: Maybe<ID_Input>;
  supplierId_contains?: Maybe<ID_Input>;
  supplierId_not_contains?: Maybe<ID_Input>;
  supplierId_starts_with?: Maybe<ID_Input>;
  supplierId_not_starts_with?: Maybe<ID_Input>;
  supplierId_ends_with?: Maybe<ID_Input>;
  supplierId_not_ends_with?: Maybe<ID_Input>;
  userId?: Maybe<ID_Input>;
  userId_not?: Maybe<ID_Input>;
  userId_in?: Maybe<ID_Input[] | ID_Input>;
  userId_not_in?: Maybe<ID_Input[] | ID_Input>;
  userId_lt?: Maybe<ID_Input>;
  userId_lte?: Maybe<ID_Input>;
  userId_gt?: Maybe<ID_Input>;
  userId_gte?: Maybe<ID_Input>;
  userId_contains?: Maybe<ID_Input>;
  userId_not_contains?: Maybe<ID_Input>;
  userId_starts_with?: Maybe<ID_Input>;
  userId_not_starts_with?: Maybe<ID_Input>;
  userId_ends_with?: Maybe<ID_Input>;
  userId_not_ends_with?: Maybe<ID_Input>;
  expectedDeliveryAt?: Maybe<DateTimeInput>;
  expectedDeliveryAt_not?: Maybe<DateTimeInput>;
  expectedDeliveryAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  expectedDeliveryAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  expectedDeliveryAt_lt?: Maybe<DateTimeInput>;
  expectedDeliveryAt_lte?: Maybe<DateTimeInput>;
  expectedDeliveryAt_gt?: Maybe<DateTimeInput>;
  expectedDeliveryAt_gte?: Maybe<DateTimeInput>;
  unfinishedTax?: Maybe<Float>;
  unfinishedTax_not?: Maybe<Float>;
  unfinishedTax_in?: Maybe<Float[] | Float>;
  unfinishedTax_not_in?: Maybe<Float[] | Float>;
  unfinishedTax_lt?: Maybe<Float>;
  unfinishedTax_lte?: Maybe<Float>;
  unfinishedTax_gt?: Maybe<Float>;
  unfinishedTax_gte?: Maybe<Float>;
  totalPrice?: Maybe<Float>;
  totalPrice_not?: Maybe<Float>;
  totalPrice_in?: Maybe<Float[] | Float>;
  totalPrice_not_in?: Maybe<Float[] | Float>;
  totalPrice_lt?: Maybe<Float>;
  totalPrice_lte?: Maybe<Float>;
  totalPrice_gt?: Maybe<Float>;
  totalPrice_gte?: Maybe<Float>;
  state?: Maybe<PurchaseOrderStatus>;
  state_not?: Maybe<PurchaseOrderStatus>;
  state_in?: Maybe<PurchaseOrderStatus[] | PurchaseOrderStatus>;
  state_not_in?: Maybe<PurchaseOrderStatus[] | PurchaseOrderStatus>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  products_every?: Maybe<PurchaseOrderItemWhereInput>;
  products_some?: Maybe<PurchaseOrderItemWhereInput>;
  products_none?: Maybe<PurchaseOrderItemWhereInput>;
  AND?: Maybe<PurchaseOrderWhereInput[] | PurchaseOrderWhereInput>;
  OR?: Maybe<PurchaseOrderWhereInput[] | PurchaseOrderWhereInput>;
  NOT?: Maybe<PurchaseOrderWhereInput[] | PurchaseOrderWhereInput>;
}

export interface PurchaseOrderItemUpdateManyWithWhereNestedInput {
  where: PurchaseOrderItemScalarWhereInput;
  data: PurchaseOrderItemUpdateManyDataInput;
}

export interface PurchaseOrderUpsertWithoutProductsInput {
  update: PurchaseOrderUpdateWithoutProductsDataInput;
  create: PurchaseOrderCreateWithoutProductsInput;
}

export interface PurchaseOrderItemUpsertWithWhereUniqueWithoutPurchaseOrderInput {
  where: PurchaseOrderItemWhereUniqueInput;
  update: PurchaseOrderItemUpdateWithoutPurchaseOrderDataInput;
  create: PurchaseOrderItemCreateWithoutPurchaseOrderInput;
}

export interface PurchaseOrderItemWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  purchaseOrder?: Maybe<PurchaseOrderWhereInput>;
  productId?: Maybe<ID_Input>;
  productId_not?: Maybe<ID_Input>;
  productId_in?: Maybe<ID_Input[] | ID_Input>;
  productId_not_in?: Maybe<ID_Input[] | ID_Input>;
  productId_lt?: Maybe<ID_Input>;
  productId_lte?: Maybe<ID_Input>;
  productId_gt?: Maybe<ID_Input>;
  productId_gte?: Maybe<ID_Input>;
  productId_contains?: Maybe<ID_Input>;
  productId_not_contains?: Maybe<ID_Input>;
  productId_starts_with?: Maybe<ID_Input>;
  productId_not_starts_with?: Maybe<ID_Input>;
  productId_ends_with?: Maybe<ID_Input>;
  productId_not_ends_with?: Maybe<ID_Input>;
  remarks?: Maybe<String>;
  remarks_not?: Maybe<String>;
  remarks_in?: Maybe<String[] | String>;
  remarks_not_in?: Maybe<String[] | String>;
  remarks_lt?: Maybe<String>;
  remarks_lte?: Maybe<String>;
  remarks_gt?: Maybe<String>;
  remarks_gte?: Maybe<String>;
  remarks_contains?: Maybe<String>;
  remarks_not_contains?: Maybe<String>;
  remarks_starts_with?: Maybe<String>;
  remarks_not_starts_with?: Maybe<String>;
  remarks_ends_with?: Maybe<String>;
  remarks_not_ends_with?: Maybe<String>;
  quantity?: Maybe<Int>;
  quantity_not?: Maybe<Int>;
  quantity_in?: Maybe<Int[] | Int>;
  quantity_not_in?: Maybe<Int[] | Int>;
  quantity_lt?: Maybe<Int>;
  quantity_lte?: Maybe<Int>;
  quantity_gt?: Maybe<Int>;
  quantity_gte?: Maybe<Int>;
  price?: Maybe<Float>;
  price_not?: Maybe<Float>;
  price_in?: Maybe<Float[] | Float>;
  price_not_in?: Maybe<Float[] | Float>;
  price_lt?: Maybe<Float>;
  price_lte?: Maybe<Float>;
  price_gt?: Maybe<Float>;
  price_gte?: Maybe<Float>;
  totalPrice?: Maybe<Float>;
  totalPrice_not?: Maybe<Float>;
  totalPrice_in?: Maybe<Float[] | Float>;
  totalPrice_not_in?: Maybe<Float[] | Float>;
  totalPrice_lt?: Maybe<Float>;
  totalPrice_lte?: Maybe<Float>;
  totalPrice_gt?: Maybe<Float>;
  totalPrice_gte?: Maybe<Float>;
  deliveryDate?: Maybe<DateTimeInput>;
  deliveryDate_not?: Maybe<DateTimeInput>;
  deliveryDate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  deliveryDate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  deliveryDate_lt?: Maybe<DateTimeInput>;
  deliveryDate_lte?: Maybe<DateTimeInput>;
  deliveryDate_gt?: Maybe<DateTimeInput>;
  deliveryDate_gte?: Maybe<DateTimeInput>;
  expiryDate?: Maybe<DateTimeInput>;
  expiryDate_not?: Maybe<DateTimeInput>;
  expiryDate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  expiryDate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  expiryDate_lt?: Maybe<DateTimeInput>;
  expiryDate_lte?: Maybe<DateTimeInput>;
  expiryDate_gt?: Maybe<DateTimeInput>;
  expiryDate_gte?: Maybe<DateTimeInput>;
  tax?: Maybe<Float>;
  tax_not?: Maybe<Float>;
  tax_in?: Maybe<Float[] | Float>;
  tax_not_in?: Maybe<Float[] | Float>;
  tax_lt?: Maybe<Float>;
  tax_lte?: Maybe<Float>;
  tax_gt?: Maybe<Float>;
  tax_gte?: Maybe<Float>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<PurchaseOrderItemWhereInput[] | PurchaseOrderItemWhereInput>;
  OR?: Maybe<PurchaseOrderItemWhereInput[] | PurchaseOrderItemWhereInput>;
  NOT?: Maybe<PurchaseOrderItemWhereInput[] | PurchaseOrderItemWhereInput>;
}

export interface PurchaseOrderItemUpdateWithWhereUniqueWithoutPurchaseOrderInput {
  where: PurchaseOrderItemWhereUniqueInput;
  data: PurchaseOrderItemUpdateWithoutPurchaseOrderDataInput;
}

export interface PurchaseOrderItemUpdateManyWithoutPurchaseOrderInput {
  create?: Maybe<
    | PurchaseOrderItemCreateWithoutPurchaseOrderInput[]
    | PurchaseOrderItemCreateWithoutPurchaseOrderInput
  >;
  delete?: Maybe<
    PurchaseOrderItemWhereUniqueInput[] | PurchaseOrderItemWhereUniqueInput
  >;
  connect?: Maybe<
    PurchaseOrderItemWhereUniqueInput[] | PurchaseOrderItemWhereUniqueInput
  >;
  set?: Maybe<
    PurchaseOrderItemWhereUniqueInput[] | PurchaseOrderItemWhereUniqueInput
  >;
  disconnect?: Maybe<
    PurchaseOrderItemWhereUniqueInput[] | PurchaseOrderItemWhereUniqueInput
  >;
  update?: Maybe<
    | PurchaseOrderItemUpdateWithWhereUniqueWithoutPurchaseOrderInput[]
    | PurchaseOrderItemUpdateWithWhereUniqueWithoutPurchaseOrderInput
  >;
  upsert?: Maybe<
    | PurchaseOrderItemUpsertWithWhereUniqueWithoutPurchaseOrderInput[]
    | PurchaseOrderItemUpsertWithWhereUniqueWithoutPurchaseOrderInput
  >;
  deleteMany?: Maybe<
    PurchaseOrderItemScalarWhereInput[] | PurchaseOrderItemScalarWhereInput
  >;
  updateMany?: Maybe<
    | PurchaseOrderItemUpdateManyWithWhereNestedInput[]
    | PurchaseOrderItemUpdateManyWithWhereNestedInput
  >;
}

export interface PurchaseOrderUpdateOneRequiredWithoutProductsInput {
  create?: Maybe<PurchaseOrderCreateWithoutProductsInput>;
  update?: Maybe<PurchaseOrderUpdateWithoutProductsDataInput>;
  upsert?: Maybe<PurchaseOrderUpsertWithoutProductsInput>;
  connect?: Maybe<PurchaseOrderWhereUniqueInput>;
}

export interface PurchaseOrderSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<PurchaseOrderWhereInput>;
  AND?: Maybe<
    PurchaseOrderSubscriptionWhereInput[] | PurchaseOrderSubscriptionWhereInput
  >;
  OR?: Maybe<
    PurchaseOrderSubscriptionWhereInput[] | PurchaseOrderSubscriptionWhereInput
  >;
  NOT?: Maybe<
    PurchaseOrderSubscriptionWhereInput[] | PurchaseOrderSubscriptionWhereInput
  >;
}

export type PurchaseOrderItemWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface PurchaseOrderCreateWithoutProductsInput {
  id?: Maybe<ID_Input>;
  code: String;
  supplierId: ID_Input;
  userId?: Maybe<ID_Input>;
  expectedDeliveryAt?: Maybe<DateTimeInput>;
  unfinishedTax?: Maybe<Float>;
  totalPrice?: Maybe<Float>;
  state: PurchaseOrderStatus;
}

export interface NodeNode {
  id: ID_Output;
}

export interface PurchaseOrderItemPreviousValues {
  id: ID_Output;
  productId: ID_Output;
  remarks?: String;
  quantity?: Int;
  price?: Float;
  totalPrice?: Float;
  deliveryDate?: DateTimeOutput;
  expiryDate?: DateTimeOutput;
  tax?: Float;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface PurchaseOrderItemPreviousValuesPromise
  extends Promise<PurchaseOrderItemPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  productId: () => Promise<ID_Output>;
  remarks: () => Promise<String>;
  quantity: () => Promise<Int>;
  price: () => Promise<Float>;
  totalPrice: () => Promise<Float>;
  deliveryDate: () => Promise<DateTimeOutput>;
  expiryDate: () => Promise<DateTimeOutput>;
  tax: () => Promise<Float>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface PurchaseOrderItemPreviousValuesSubscription
  extends Promise<AsyncIterator<PurchaseOrderItemPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  productId: () => Promise<AsyncIterator<ID_Output>>;
  remarks: () => Promise<AsyncIterator<String>>;
  quantity: () => Promise<AsyncIterator<Int>>;
  price: () => Promise<AsyncIterator<Float>>;
  totalPrice: () => Promise<AsyncIterator<Float>>;
  deliveryDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  expiryDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  tax: () => Promise<AsyncIterator<Float>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PurchaseOrderEdge {
  node: PurchaseOrder;
  cursor: String;
}

export interface PurchaseOrderEdgePromise
  extends Promise<PurchaseOrderEdge>,
    Fragmentable {
  node: <T = PurchaseOrderPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PurchaseOrderEdgeSubscription
  extends Promise<AsyncIterator<PurchaseOrderEdge>>,
    Fragmentable {
  node: <T = PurchaseOrderSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface PurchaseOrderSubscriptionPayload {
  mutation: MutationType;
  node: PurchaseOrder;
  updatedFields: String[];
  previousValues: PurchaseOrderPreviousValues;
}

export interface PurchaseOrderSubscriptionPayloadPromise
  extends Promise<PurchaseOrderSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PurchaseOrderPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PurchaseOrderPreviousValuesPromise>() => T;
}

export interface PurchaseOrderSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PurchaseOrderSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PurchaseOrderSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PurchaseOrderPreviousValuesSubscription>() => T;
}

export interface PurchaseOrderPreviousValues {
  id: ID_Output;
  code: String;
  supplierId: ID_Output;
  userId?: ID_Output;
  expectedDeliveryAt?: DateTimeOutput;
  unfinishedTax?: Float;
  totalPrice?: Float;
  state: PurchaseOrderStatus;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface PurchaseOrderPreviousValuesPromise
  extends Promise<PurchaseOrderPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  code: () => Promise<String>;
  supplierId: () => Promise<ID_Output>;
  userId: () => Promise<ID_Output>;
  expectedDeliveryAt: () => Promise<DateTimeOutput>;
  unfinishedTax: () => Promise<Float>;
  totalPrice: () => Promise<Float>;
  state: () => Promise<PurchaseOrderStatus>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface PurchaseOrderPreviousValuesSubscription
  extends Promise<AsyncIterator<PurchaseOrderPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  code: () => Promise<AsyncIterator<String>>;
  supplierId: () => Promise<AsyncIterator<ID_Output>>;
  userId: () => Promise<AsyncIterator<ID_Output>>;
  expectedDeliveryAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  unfinishedTax: () => Promise<AsyncIterator<Float>>;
  totalPrice: () => Promise<AsyncIterator<Float>>;
  state: () => Promise<AsyncIterator<PurchaseOrderStatus>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PurchaseOrderConnection {
  pageInfo: PageInfo;
  edges: PurchaseOrderEdge[];
}

export interface PurchaseOrderConnectionPromise
  extends Promise<PurchaseOrderConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PurchaseOrderEdge>>() => T;
  aggregate: <T = AggregatePurchaseOrderPromise>() => T;
}

export interface PurchaseOrderConnectionSubscription
  extends Promise<AsyncIterator<PurchaseOrderConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PurchaseOrderEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePurchaseOrderSubscription>() => T;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface PurchaseOrderItem {
  id: ID_Output;
  productId: ID_Output;
  remarks?: String;
  quantity?: Int;
  price?: Float;
  totalPrice?: Float;
  deliveryDate?: DateTimeOutput;
  expiryDate?: DateTimeOutput;
  tax?: Float;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface PurchaseOrderItemPromise
  extends Promise<PurchaseOrderItem>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  purchaseOrder: <T = PurchaseOrderPromise>() => T;
  productId: () => Promise<ID_Output>;
  remarks: () => Promise<String>;
  quantity: () => Promise<Int>;
  price: () => Promise<Float>;
  totalPrice: () => Promise<Float>;
  deliveryDate: () => Promise<DateTimeOutput>;
  expiryDate: () => Promise<DateTimeOutput>;
  tax: () => Promise<Float>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface PurchaseOrderItemSubscription
  extends Promise<AsyncIterator<PurchaseOrderItem>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  purchaseOrder: <T = PurchaseOrderSubscription>() => T;
  productId: () => Promise<AsyncIterator<ID_Output>>;
  remarks: () => Promise<AsyncIterator<String>>;
  quantity: () => Promise<AsyncIterator<Int>>;
  price: () => Promise<AsyncIterator<Float>>;
  totalPrice: () => Promise<AsyncIterator<Float>>;
  deliveryDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  expiryDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  tax: () => Promise<AsyncIterator<Float>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PurchaseOrderItemNullablePromise
  extends Promise<PurchaseOrderItem | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  purchaseOrder: <T = PurchaseOrderPromise>() => T;
  productId: () => Promise<ID_Output>;
  remarks: () => Promise<String>;
  quantity: () => Promise<Int>;
  price: () => Promise<Float>;
  totalPrice: () => Promise<Float>;
  deliveryDate: () => Promise<DateTimeOutput>;
  expiryDate: () => Promise<DateTimeOutput>;
  tax: () => Promise<Float>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface PurchaseOrder {
  id: ID_Output;
  code: String;
  supplierId: ID_Output;
  userId?: ID_Output;
  expectedDeliveryAt?: DateTimeOutput;
  unfinishedTax?: Float;
  totalPrice?: Float;
  state: PurchaseOrderStatus;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface PurchaseOrderPromise
  extends Promise<PurchaseOrder>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  code: () => Promise<String>;
  supplierId: () => Promise<ID_Output>;
  userId: () => Promise<ID_Output>;
  expectedDeliveryAt: () => Promise<DateTimeOutput>;
  unfinishedTax: () => Promise<Float>;
  totalPrice: () => Promise<Float>;
  state: () => Promise<PurchaseOrderStatus>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  products: <T = FragmentableArray<PurchaseOrderItem>>(args?: {
    where?: PurchaseOrderItemWhereInput;
    orderBy?: PurchaseOrderItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface PurchaseOrderSubscription
  extends Promise<AsyncIterator<PurchaseOrder>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  code: () => Promise<AsyncIterator<String>>;
  supplierId: () => Promise<AsyncIterator<ID_Output>>;
  userId: () => Promise<AsyncIterator<ID_Output>>;
  expectedDeliveryAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  unfinishedTax: () => Promise<AsyncIterator<Float>>;
  totalPrice: () => Promise<AsyncIterator<Float>>;
  state: () => Promise<AsyncIterator<PurchaseOrderStatus>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  products: <T = Promise<AsyncIterator<PurchaseOrderItemSubscription>>>(args?: {
    where?: PurchaseOrderItemWhereInput;
    orderBy?: PurchaseOrderItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface PurchaseOrderNullablePromise
  extends Promise<PurchaseOrder | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  code: () => Promise<String>;
  supplierId: () => Promise<ID_Output>;
  userId: () => Promise<ID_Output>;
  expectedDeliveryAt: () => Promise<DateTimeOutput>;
  unfinishedTax: () => Promise<Float>;
  totalPrice: () => Promise<Float>;
  state: () => Promise<PurchaseOrderStatus>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  products: <T = FragmentableArray<PurchaseOrderItem>>(args?: {
    where?: PurchaseOrderItemWhereInput;
    orderBy?: PurchaseOrderItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface AggregatePurchaseOrderItem {
  count: Int;
}

export interface AggregatePurchaseOrderItemPromise
  extends Promise<AggregatePurchaseOrderItem>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePurchaseOrderItemSubscription
  extends Promise<AsyncIterator<AggregatePurchaseOrderItem>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface PurchaseOrderItemSubscriptionPayload {
  mutation: MutationType;
  node: PurchaseOrderItem;
  updatedFields: String[];
  previousValues: PurchaseOrderItemPreviousValues;
}

export interface PurchaseOrderItemSubscriptionPayloadPromise
  extends Promise<PurchaseOrderItemSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PurchaseOrderItemPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PurchaseOrderItemPreviousValuesPromise>() => T;
}

export interface PurchaseOrderItemSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PurchaseOrderItemSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PurchaseOrderItemSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PurchaseOrderItemPreviousValuesSubscription>() => T;
}

export interface PurchaseOrderItemEdge {
  node: PurchaseOrderItem;
  cursor: String;
}

export interface PurchaseOrderItemEdgePromise
  extends Promise<PurchaseOrderItemEdge>,
    Fragmentable {
  node: <T = PurchaseOrderItemPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PurchaseOrderItemEdgeSubscription
  extends Promise<AsyncIterator<PurchaseOrderItemEdge>>,
    Fragmentable {
  node: <T = PurchaseOrderItemSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregatePurchaseOrder {
  count: Int;
}

export interface AggregatePurchaseOrderPromise
  extends Promise<AggregatePurchaseOrder>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePurchaseOrderSubscription
  extends Promise<AsyncIterator<AggregatePurchaseOrder>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PurchaseOrderItemConnection {
  pageInfo: PageInfo;
  edges: PurchaseOrderItemEdge[];
}

export interface PurchaseOrderItemConnectionPromise
  extends Promise<PurchaseOrderItemConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PurchaseOrderItemEdge>>() => T;
  aggregate: <T = AggregatePurchaseOrderItemPromise>() => T;
}

export interface PurchaseOrderItemConnectionSubscription
  extends Promise<AsyncIterator<PurchaseOrderItemConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PurchaseOrderItemEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePurchaseOrderItemSubscription>() => T;
}

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).
*/
export type Float = number;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

export type Long = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "PurchaseOrder",
    embedded: false
  },
  {
    name: "PurchaseOrderStatus",
    embedded: false
  },
  {
    name: "PurchaseOrderItem",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
