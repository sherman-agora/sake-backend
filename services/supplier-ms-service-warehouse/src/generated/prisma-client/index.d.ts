// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  warehouse: (where?: WarehouseWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  warehouse: (where: WarehouseWhereUniqueInput) => WarehouseNullablePromise;
  warehouses: (args?: {
    where?: WarehouseWhereInput;
    orderBy?: WarehouseOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Warehouse>;
  warehousesConnection: (args?: {
    where?: WarehouseWhereInput;
    orderBy?: WarehouseOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => WarehouseConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createWarehouse: (data: WarehouseCreateInput) => WarehousePromise;
  updateWarehouse: (args: {
    data: WarehouseUpdateInput;
    where: WarehouseWhereUniqueInput;
  }) => WarehousePromise;
  updateManyWarehouses: (args: {
    data: WarehouseUpdateManyMutationInput;
    where?: WarehouseWhereInput;
  }) => BatchPayloadPromise;
  upsertWarehouse: (args: {
    where: WarehouseWhereUniqueInput;
    create: WarehouseCreateInput;
    update: WarehouseUpdateInput;
  }) => WarehousePromise;
  deleteWarehouse: (where: WarehouseWhereUniqueInput) => WarehousePromise;
  deleteManyWarehouses: (where?: WarehouseWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  warehouse: (
    where?: WarehouseSubscriptionWhereInput
  ) => WarehouseSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type WarehouseOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "code_ASC"
  | "code_DESC"
  | "description_ASC"
  | "description_DESC"
  | "address_ASC"
  | "address_DESC"
  | "status_ASC"
  | "status_DESC";

export type WarehouseStatus = "ACTIVE" | "INACTIVE";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface WarehouseCreateInput {
  id?: Maybe<ID_Input>;
  code: String;
  description?: Maybe<String>;
  address?: Maybe<String>;
  status?: Maybe<WarehouseStatus>;
}

export interface WarehouseUpdateInput {
  code?: Maybe<String>;
  description?: Maybe<String>;
  address?: Maybe<String>;
  status?: Maybe<WarehouseStatus>;
}

export interface WarehouseUpdateManyMutationInput {
  code?: Maybe<String>;
  description?: Maybe<String>;
  address?: Maybe<String>;
  status?: Maybe<WarehouseStatus>;
}

export interface WarehouseWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  code?: Maybe<String>;
  code_not?: Maybe<String>;
  code_in?: Maybe<String[] | String>;
  code_not_in?: Maybe<String[] | String>;
  code_lt?: Maybe<String>;
  code_lte?: Maybe<String>;
  code_gt?: Maybe<String>;
  code_gte?: Maybe<String>;
  code_contains?: Maybe<String>;
  code_not_contains?: Maybe<String>;
  code_starts_with?: Maybe<String>;
  code_not_starts_with?: Maybe<String>;
  code_ends_with?: Maybe<String>;
  code_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  address?: Maybe<String>;
  address_not?: Maybe<String>;
  address_in?: Maybe<String[] | String>;
  address_not_in?: Maybe<String[] | String>;
  address_lt?: Maybe<String>;
  address_lte?: Maybe<String>;
  address_gt?: Maybe<String>;
  address_gte?: Maybe<String>;
  address_contains?: Maybe<String>;
  address_not_contains?: Maybe<String>;
  address_starts_with?: Maybe<String>;
  address_not_starts_with?: Maybe<String>;
  address_ends_with?: Maybe<String>;
  address_not_ends_with?: Maybe<String>;
  status?: Maybe<WarehouseStatus>;
  status_not?: Maybe<WarehouseStatus>;
  status_in?: Maybe<WarehouseStatus[] | WarehouseStatus>;
  status_not_in?: Maybe<WarehouseStatus[] | WarehouseStatus>;
  AND?: Maybe<WarehouseWhereInput[] | WarehouseWhereInput>;
  OR?: Maybe<WarehouseWhereInput[] | WarehouseWhereInput>;
  NOT?: Maybe<WarehouseWhereInput[] | WarehouseWhereInput>;
}

export interface WarehouseSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<WarehouseWhereInput>;
  AND?: Maybe<
    WarehouseSubscriptionWhereInput[] | WarehouseSubscriptionWhereInput
  >;
  OR?: Maybe<
    WarehouseSubscriptionWhereInput[] | WarehouseSubscriptionWhereInput
  >;
  NOT?: Maybe<
    WarehouseSubscriptionWhereInput[] | WarehouseSubscriptionWhereInput
  >;
}

export type WarehouseWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  code?: Maybe<String>;
}>;

export interface NodeNode {
  id: ID_Output;
}

export interface WarehouseEdge {
  node: Warehouse;
  cursor: String;
}

export interface WarehouseEdgePromise
  extends Promise<WarehouseEdge>,
    Fragmentable {
  node: <T = WarehousePromise>() => T;
  cursor: () => Promise<String>;
}

export interface WarehouseEdgeSubscription
  extends Promise<AsyncIterator<WarehouseEdge>>,
    Fragmentable {
  node: <T = WarehouseSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface WarehousePreviousValues {
  id: ID_Output;
  code: String;
  description?: String;
  address?: String;
  status: WarehouseStatus;
}

export interface WarehousePreviousValuesPromise
  extends Promise<WarehousePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  code: () => Promise<String>;
  description: () => Promise<String>;
  address: () => Promise<String>;
  status: () => Promise<WarehouseStatus>;
}

export interface WarehousePreviousValuesSubscription
  extends Promise<AsyncIterator<WarehousePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  code: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  address: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<WarehouseStatus>>;
}

export interface WarehouseSubscriptionPayload {
  mutation: MutationType;
  node: Warehouse;
  updatedFields: String[];
  previousValues: WarehousePreviousValues;
}

export interface WarehouseSubscriptionPayloadPromise
  extends Promise<WarehouseSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = WarehousePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = WarehousePreviousValuesPromise>() => T;
}

export interface WarehouseSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<WarehouseSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = WarehouseSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = WarehousePreviousValuesSubscription>() => T;
}

export interface Warehouse {
  id: ID_Output;
  code: String;
  description?: String;
  address?: String;
  status: WarehouseStatus;
}

export interface WarehousePromise extends Promise<Warehouse>, Fragmentable {
  id: () => Promise<ID_Output>;
  code: () => Promise<String>;
  description: () => Promise<String>;
  address: () => Promise<String>;
  status: () => Promise<WarehouseStatus>;
}

export interface WarehouseSubscription
  extends Promise<AsyncIterator<Warehouse>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  code: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  address: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<WarehouseStatus>>;
}

export interface WarehouseNullablePromise
  extends Promise<Warehouse | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  code: () => Promise<String>;
  description: () => Promise<String>;
  address: () => Promise<String>;
  status: () => Promise<WarehouseStatus>;
}

export interface AggregateWarehouse {
  count: Int;
}

export interface AggregateWarehousePromise
  extends Promise<AggregateWarehouse>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateWarehouseSubscription
  extends Promise<AsyncIterator<AggregateWarehouse>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface WarehouseConnection {
  pageInfo: PageInfo;
  edges: WarehouseEdge[];
}

export interface WarehouseConnectionPromise
  extends Promise<WarehouseConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<WarehouseEdge>>() => T;
  aggregate: <T = AggregateWarehousePromise>() => T;
}

export interface WarehouseConnectionSubscription
  extends Promise<AsyncIterator<WarehouseConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<WarehouseEdgeSubscription>>>() => T;
  aggregate: <T = AggregateWarehouseSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

export type Long = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Warehouse",
    embedded: false
  },
  {
    name: "WarehouseStatus",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
